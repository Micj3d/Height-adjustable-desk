
adjustable desk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e44  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e9c  08004e9c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004e9c  08004e9c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e9c  08004e9c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000014  08004eb8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08004eb8  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c497  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd3  00000000  00000000  0002c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198a1  00000000  00000000  0002fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f946  00000000  00000000  000494a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000946a4  00000000  00000000  00058de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  000ed4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004040 	.word	0x08004040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004040 	.word	0x08004040

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0a5b      	lsrs	r3, r3, #9
 8000228:	024e      	lsls	r6, r1, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	004f      	lsls	r7, r1, #1
 800022e:	00da      	lsls	r2, r3, #3
 8000230:	0fc4      	lsrs	r4, r0, #31
 8000232:	469c      	mov	ip, r3
 8000234:	0a70      	lsrs	r0, r6, #9
 8000236:	4690      	mov	r8, r2
 8000238:	b500      	push	{lr}
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	0e3f      	lsrs	r7, r7, #24
 800023e:	0fc9      	lsrs	r1, r1, #31
 8000240:	09b6      	lsrs	r6, r6, #6
 8000242:	428c      	cmp	r4, r1
 8000244:	d04b      	beq.n	80002de <__aeabi_fadd+0xbe>
 8000246:	1bea      	subs	r2, r5, r7
 8000248:	2a00      	cmp	r2, #0
 800024a:	dd36      	ble.n	80002ba <__aeabi_fadd+0x9a>
 800024c:	2f00      	cmp	r7, #0
 800024e:	d061      	beq.n	8000314 <__aeabi_fadd+0xf4>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d100      	bne.n	8000256 <__aeabi_fadd+0x36>
 8000254:	e0ad      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	04db      	lsls	r3, r3, #19
 800025a:	431e      	orrs	r6, r3
 800025c:	2a1b      	cmp	r2, #27
 800025e:	dc00      	bgt.n	8000262 <__aeabi_fadd+0x42>
 8000260:	e0d3      	b.n	800040a <__aeabi_fadd+0x1ea>
 8000262:	2001      	movs	r0, #1
 8000264:	4643      	mov	r3, r8
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	0143      	lsls	r3, r0, #5
 800026a:	d400      	bmi.n	800026e <__aeabi_fadd+0x4e>
 800026c:	e08c      	b.n	8000388 <__aeabi_fadd+0x168>
 800026e:	0180      	lsls	r0, r0, #6
 8000270:	0987      	lsrs	r7, r0, #6
 8000272:	0038      	movs	r0, r7
 8000274:	f000 ff94 	bl	80011a0 <__clzsi2>
 8000278:	3805      	subs	r0, #5
 800027a:	4087      	lsls	r7, r0
 800027c:	4285      	cmp	r5, r0
 800027e:	dc00      	bgt.n	8000282 <__aeabi_fadd+0x62>
 8000280:	e0b6      	b.n	80003f0 <__aeabi_fadd+0x1d0>
 8000282:	1a2d      	subs	r5, r5, r0
 8000284:	48b3      	ldr	r0, [pc, #716]	; (8000554 <__aeabi_fadd+0x334>)
 8000286:	4038      	ands	r0, r7
 8000288:	0743      	lsls	r3, r0, #29
 800028a:	d004      	beq.n	8000296 <__aeabi_fadd+0x76>
 800028c:	230f      	movs	r3, #15
 800028e:	4003      	ands	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d000      	beq.n	8000296 <__aeabi_fadd+0x76>
 8000294:	3004      	adds	r0, #4
 8000296:	0143      	lsls	r3, r0, #5
 8000298:	d400      	bmi.n	800029c <__aeabi_fadd+0x7c>
 800029a:	e078      	b.n	800038e <__aeabi_fadd+0x16e>
 800029c:	1c6a      	adds	r2, r5, #1
 800029e:	2dfe      	cmp	r5, #254	; 0xfe
 80002a0:	d065      	beq.n	800036e <__aeabi_fadd+0x14e>
 80002a2:	0180      	lsls	r0, r0, #6
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	469c      	mov	ip, r3
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	4663      	mov	r3, ip
 80002ac:	05d0      	lsls	r0, r2, #23
 80002ae:	4318      	orrs	r0, r3
 80002b0:	07e4      	lsls	r4, r4, #31
 80002b2:	4320      	orrs	r0, r4
 80002b4:	bc80      	pop	{r7}
 80002b6:	46b8      	mov	r8, r7
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d035      	beq.n	800032a <__aeabi_fadd+0x10a>
 80002be:	1b7a      	subs	r2, r7, r5
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fadd+0xa6>
 80002c4:	e0af      	b.n	8000426 <__aeabi_fadd+0x206>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e0a7      	b.n	800041e <__aeabi_fadd+0x1fe>
 80002ce:	1e53      	subs	r3, r2, #1
 80002d0:	2a01      	cmp	r2, #1
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e12f      	b.n	8000536 <__aeabi_fadd+0x316>
 80002d6:	2aff      	cmp	r2, #255	; 0xff
 80002d8:	d069      	beq.n	80003ae <__aeabi_fadd+0x18e>
 80002da:	001a      	movs	r2, r3
 80002dc:	e0aa      	b.n	8000434 <__aeabi_fadd+0x214>
 80002de:	1be9      	subs	r1, r5, r7
 80002e0:	2900      	cmp	r1, #0
 80002e2:	dd70      	ble.n	80003c6 <__aeabi_fadd+0x1a6>
 80002e4:	2f00      	cmp	r7, #0
 80002e6:	d037      	beq.n	8000358 <__aeabi_fadd+0x138>
 80002e8:	2dff      	cmp	r5, #255	; 0xff
 80002ea:	d062      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	04db      	lsls	r3, r3, #19
 80002f0:	431e      	orrs	r6, r3
 80002f2:	291b      	cmp	r1, #27
 80002f4:	dc00      	bgt.n	80002f8 <__aeabi_fadd+0xd8>
 80002f6:	e0b0      	b.n	800045a <__aeabi_fadd+0x23a>
 80002f8:	2001      	movs	r0, #1
 80002fa:	4440      	add	r0, r8
 80002fc:	0143      	lsls	r3, r0, #5
 80002fe:	d543      	bpl.n	8000388 <__aeabi_fadd+0x168>
 8000300:	3501      	adds	r5, #1
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d033      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000306:	2301      	movs	r3, #1
 8000308:	4a93      	ldr	r2, [pc, #588]	; (8000558 <__aeabi_fadd+0x338>)
 800030a:	4003      	ands	r3, r0
 800030c:	0840      	lsrs	r0, r0, #1
 800030e:	4010      	ands	r0, r2
 8000310:	4318      	orrs	r0, r3
 8000312:	e7b9      	b.n	8000288 <__aeabi_fadd+0x68>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d100      	bne.n	800031a <__aeabi_fadd+0xfa>
 8000318:	e083      	b.n	8000422 <__aeabi_fadd+0x202>
 800031a:	1e51      	subs	r1, r2, #1
 800031c:	2a01      	cmp	r2, #1
 800031e:	d100      	bne.n	8000322 <__aeabi_fadd+0x102>
 8000320:	e0d8      	b.n	80004d4 <__aeabi_fadd+0x2b4>
 8000322:	2aff      	cmp	r2, #255	; 0xff
 8000324:	d045      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000326:	000a      	movs	r2, r1
 8000328:	e798      	b.n	800025c <__aeabi_fadd+0x3c>
 800032a:	27fe      	movs	r7, #254	; 0xfe
 800032c:	1c6a      	adds	r2, r5, #1
 800032e:	4217      	tst	r7, r2
 8000330:	d000      	beq.n	8000334 <__aeabi_fadd+0x114>
 8000332:	e086      	b.n	8000442 <__aeabi_fadd+0x222>
 8000334:	2d00      	cmp	r5, #0
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0x11a>
 8000338:	e0b7      	b.n	80004aa <__aeabi_fadd+0x28a>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x122>
 8000340:	e0f3      	b.n	800052a <__aeabi_fadd+0x30a>
 8000342:	2200      	movs	r2, #0
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0b0      	beq.n	80002aa <__aeabi_fadd+0x8a>
 8000348:	1b98      	subs	r0, r3, r6
 800034a:	0143      	lsls	r3, r0, #5
 800034c:	d400      	bmi.n	8000350 <__aeabi_fadd+0x130>
 800034e:	e0fa      	b.n	8000546 <__aeabi_fadd+0x326>
 8000350:	4643      	mov	r3, r8
 8000352:	000c      	movs	r4, r1
 8000354:	1af0      	subs	r0, r6, r3
 8000356:	e797      	b.n	8000288 <__aeabi_fadd+0x68>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d100      	bne.n	800035e <__aeabi_fadd+0x13e>
 800035c:	e0c8      	b.n	80004f0 <__aeabi_fadd+0x2d0>
 800035e:	1e4a      	subs	r2, r1, #1
 8000360:	2901      	cmp	r1, #1
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x146>
 8000364:	e0ae      	b.n	80004c4 <__aeabi_fadd+0x2a4>
 8000366:	29ff      	cmp	r1, #255	; 0xff
 8000368:	d023      	beq.n	80003b2 <__aeabi_fadd+0x192>
 800036a:	0011      	movs	r1, r2
 800036c:	e7c1      	b.n	80002f2 <__aeabi_fadd+0xd2>
 800036e:	2300      	movs	r3, #0
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	469c      	mov	ip, r3
 8000374:	e799      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000376:	21fe      	movs	r1, #254	; 0xfe
 8000378:	1c6a      	adds	r2, r5, #1
 800037a:	4211      	tst	r1, r2
 800037c:	d077      	beq.n	800046e <__aeabi_fadd+0x24e>
 800037e:	2aff      	cmp	r2, #255	; 0xff
 8000380:	d0f5      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000382:	0015      	movs	r5, r2
 8000384:	4446      	add	r6, r8
 8000386:	0870      	lsrs	r0, r6, #1
 8000388:	0743      	lsls	r3, r0, #29
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0x16e>
 800038c:	e77e      	b.n	800028c <__aeabi_fadd+0x6c>
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	2dff      	cmp	r5, #255	; 0xff
 8000392:	d00e      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000394:	025b      	lsls	r3, r3, #9
 8000396:	0a5b      	lsrs	r3, r3, #9
 8000398:	469c      	mov	ip, r3
 800039a:	b2ea      	uxtb	r2, r5
 800039c:	e785      	b.n	80002aa <__aeabi_fadd+0x8a>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d007      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	4213      	tst	r3, r2
 80003a8:	d003      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003aa:	4210      	tst	r0, r2
 80003ac:	d101      	bne.n	80003b2 <__aeabi_fadd+0x192>
 80003ae:	000c      	movs	r4, r1
 80003b0:	0003      	movs	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0db      	beq.n	800036e <__aeabi_fadd+0x14e>
 80003b6:	2080      	movs	r0, #128	; 0x80
 80003b8:	03c0      	lsls	r0, r0, #15
 80003ba:	4318      	orrs	r0, r3
 80003bc:	0240      	lsls	r0, r0, #9
 80003be:	0a43      	lsrs	r3, r0, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	22ff      	movs	r2, #255	; 0xff
 80003c4:	e771      	b.n	80002aa <__aeabi_fadd+0x8a>
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d0d5      	beq.n	8000376 <__aeabi_fadd+0x156>
 80003ca:	1b7a      	subs	r2, r7, r5
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d160      	bne.n	8000492 <__aeabi_fadd+0x272>
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d024      	beq.n	8000420 <__aeabi_fadd+0x200>
 80003d6:	1e53      	subs	r3, r2, #1
 80003d8:	2a01      	cmp	r2, #1
 80003da:	d073      	beq.n	80004c4 <__aeabi_fadd+0x2a4>
 80003dc:	2aff      	cmp	r2, #255	; 0xff
 80003de:	d0e7      	beq.n	80003b0 <__aeabi_fadd+0x190>
 80003e0:	001a      	movs	r2, r3
 80003e2:	2a1b      	cmp	r2, #27
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_fadd+0x1c8>
 80003e6:	e085      	b.n	80004f4 <__aeabi_fadd+0x2d4>
 80003e8:	2001      	movs	r0, #1
 80003ea:	003d      	movs	r5, r7
 80003ec:	1980      	adds	r0, r0, r6
 80003ee:	e785      	b.n	80002fc <__aeabi_fadd+0xdc>
 80003f0:	2320      	movs	r3, #32
 80003f2:	003a      	movs	r2, r7
 80003f4:	1b45      	subs	r5, r0, r5
 80003f6:	0038      	movs	r0, r7
 80003f8:	3501      	adds	r5, #1
 80003fa:	40ea      	lsrs	r2, r5
 80003fc:	1b5d      	subs	r5, r3, r5
 80003fe:	40a8      	lsls	r0, r5
 8000400:	1e43      	subs	r3, r0, #1
 8000402:	4198      	sbcs	r0, r3
 8000404:	2500      	movs	r5, #0
 8000406:	4310      	orrs	r0, r2
 8000408:	e73e      	b.n	8000288 <__aeabi_fadd+0x68>
 800040a:	2320      	movs	r3, #32
 800040c:	0030      	movs	r0, r6
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	0031      	movs	r1, r6
 8000412:	4098      	lsls	r0, r3
 8000414:	40d1      	lsrs	r1, r2
 8000416:	1e43      	subs	r3, r0, #1
 8000418:	4198      	sbcs	r0, r3
 800041a:	4308      	orrs	r0, r1
 800041c:	e722      	b.n	8000264 <__aeabi_fadd+0x44>
 800041e:	000c      	movs	r4, r1
 8000420:	0003      	movs	r3, r0
 8000422:	0015      	movs	r5, r2
 8000424:	e7b4      	b.n	8000390 <__aeabi_fadd+0x170>
 8000426:	2fff      	cmp	r7, #255	; 0xff
 8000428:	d0c1      	beq.n	80003ae <__aeabi_fadd+0x18e>
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	4640      	mov	r0, r8
 800042e:	04db      	lsls	r3, r3, #19
 8000430:	4318      	orrs	r0, r3
 8000432:	4680      	mov	r8, r0
 8000434:	2a1b      	cmp	r2, #27
 8000436:	dd51      	ble.n	80004dc <__aeabi_fadd+0x2bc>
 8000438:	2001      	movs	r0, #1
 800043a:	000c      	movs	r4, r1
 800043c:	003d      	movs	r5, r7
 800043e:	1a30      	subs	r0, r6, r0
 8000440:	e712      	b.n	8000268 <__aeabi_fadd+0x48>
 8000442:	4643      	mov	r3, r8
 8000444:	1b9f      	subs	r7, r3, r6
 8000446:	017b      	lsls	r3, r7, #5
 8000448:	d42b      	bmi.n	80004a2 <__aeabi_fadd+0x282>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x230>
 800044e:	e710      	b.n	8000272 <__aeabi_fadd+0x52>
 8000450:	2300      	movs	r3, #0
 8000452:	2400      	movs	r4, #0
 8000454:	2200      	movs	r2, #0
 8000456:	469c      	mov	ip, r3
 8000458:	e727      	b.n	80002aa <__aeabi_fadd+0x8a>
 800045a:	2320      	movs	r3, #32
 800045c:	0032      	movs	r2, r6
 800045e:	0030      	movs	r0, r6
 8000460:	40ca      	lsrs	r2, r1
 8000462:	1a59      	subs	r1, r3, r1
 8000464:	4088      	lsls	r0, r1
 8000466:	1e43      	subs	r3, r0, #1
 8000468:	4198      	sbcs	r0, r3
 800046a:	4310      	orrs	r0, r2
 800046c:	e745      	b.n	80002fa <__aeabi_fadd+0xda>
 800046e:	2d00      	cmp	r5, #0
 8000470:	d14a      	bne.n	8000508 <__aeabi_fadd+0x2e8>
 8000472:	4643      	mov	r3, r8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d063      	beq.n	8000540 <__aeabi_fadd+0x320>
 8000478:	2200      	movs	r2, #0
 800047a:	2e00      	cmp	r6, #0
 800047c:	d100      	bne.n	8000480 <__aeabi_fadd+0x260>
 800047e:	e714      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000480:	0030      	movs	r0, r6
 8000482:	4440      	add	r0, r8
 8000484:	0143      	lsls	r3, r0, #5
 8000486:	d400      	bmi.n	800048a <__aeabi_fadd+0x26a>
 8000488:	e77e      	b.n	8000388 <__aeabi_fadd+0x168>
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <__aeabi_fadd+0x334>)
 800048c:	3501      	adds	r5, #1
 800048e:	4018      	ands	r0, r3
 8000490:	e77a      	b.n	8000388 <__aeabi_fadd+0x168>
 8000492:	2fff      	cmp	r7, #255	; 0xff
 8000494:	d08c      	beq.n	80003b0 <__aeabi_fadd+0x190>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	4641      	mov	r1, r8
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	4319      	orrs	r1, r3
 800049e:	4688      	mov	r8, r1
 80004a0:	e79f      	b.n	80003e2 <__aeabi_fadd+0x1c2>
 80004a2:	4643      	mov	r3, r8
 80004a4:	000c      	movs	r4, r1
 80004a6:	1af7      	subs	r7, r6, r3
 80004a8:	e6e3      	b.n	8000272 <__aeabi_fadd+0x52>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fadd+0x292>
 80004b0:	e775      	b.n	800039e <__aeabi_fadd+0x17e>
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x298>
 80004b6:	e77a      	b.n	80003ae <__aeabi_fadd+0x18e>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	2400      	movs	r4, #0
 80004be:	469c      	mov	ip, r3
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	e6f2      	b.n	80002aa <__aeabi_fadd+0x8a>
 80004c4:	0030      	movs	r0, r6
 80004c6:	4440      	add	r0, r8
 80004c8:	2501      	movs	r5, #1
 80004ca:	0143      	lsls	r3, r0, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x2b0>
 80004ce:	e75b      	b.n	8000388 <__aeabi_fadd+0x168>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e718      	b.n	8000306 <__aeabi_fadd+0xe6>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2501      	movs	r5, #1
 80004d8:	1b98      	subs	r0, r3, r6
 80004da:	e6c5      	b.n	8000268 <__aeabi_fadd+0x48>
 80004dc:	2320      	movs	r3, #32
 80004de:	4644      	mov	r4, r8
 80004e0:	4640      	mov	r0, r8
 80004e2:	40d4      	lsrs	r4, r2
 80004e4:	1a9a      	subs	r2, r3, r2
 80004e6:	4090      	lsls	r0, r2
 80004e8:	1e43      	subs	r3, r0, #1
 80004ea:	4198      	sbcs	r0, r3
 80004ec:	4320      	orrs	r0, r4
 80004ee:	e7a4      	b.n	800043a <__aeabi_fadd+0x21a>
 80004f0:	000d      	movs	r5, r1
 80004f2:	e74d      	b.n	8000390 <__aeabi_fadd+0x170>
 80004f4:	2320      	movs	r3, #32
 80004f6:	4641      	mov	r1, r8
 80004f8:	4640      	mov	r0, r8
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	1a9a      	subs	r2, r3, r2
 80004fe:	4090      	lsls	r0, r2
 8000500:	1e43      	subs	r3, r0, #1
 8000502:	4198      	sbcs	r0, r3
 8000504:	4308      	orrs	r0, r1
 8000506:	e770      	b.n	80003ea <__aeabi_fadd+0x1ca>
 8000508:	4642      	mov	r2, r8
 800050a:	2a00      	cmp	r2, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x2f0>
 800050e:	e74f      	b.n	80003b0 <__aeabi_fadd+0x190>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x2f6>
 8000514:	e74d      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	03d2      	lsls	r2, r2, #15
 800051a:	4213      	tst	r3, r2
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x300>
 800051e:	e748      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000520:	4210      	tst	r0, r2
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0x306>
 8000524:	e745      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000526:	0003      	movs	r3, r0
 8000528:	e743      	b.n	80003b2 <__aeabi_fadd+0x192>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d090      	beq.n	8000450 <__aeabi_fadd+0x230>
 800052e:	000c      	movs	r4, r1
 8000530:	4684      	mov	ip, r0
 8000532:	2200      	movs	r2, #0
 8000534:	e6b9      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000536:	4643      	mov	r3, r8
 8000538:	000c      	movs	r4, r1
 800053a:	1af0      	subs	r0, r6, r3
 800053c:	3501      	adds	r5, #1
 800053e:	e693      	b.n	8000268 <__aeabi_fadd+0x48>
 8000540:	4684      	mov	ip, r0
 8000542:	2200      	movs	r2, #0
 8000544:	e6b1      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000546:	2800      	cmp	r0, #0
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x32c>
 800054a:	e71d      	b.n	8000388 <__aeabi_fadd+0x168>
 800054c:	2300      	movs	r3, #0
 800054e:	2400      	movs	r4, #0
 8000550:	469c      	mov	ip, r3
 8000552:	e6aa      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000554:	fbffffff 	.word	0xfbffffff
 8000558:	7dffffff 	.word	0x7dffffff

0800055c <__aeabi_ui2f>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	1e05      	subs	r5, r0, #0
 8000560:	d00e      	beq.n	8000580 <__aeabi_ui2f+0x24>
 8000562:	f000 fe1d 	bl	80011a0 <__clzsi2>
 8000566:	239e      	movs	r3, #158	; 0x9e
 8000568:	0004      	movs	r4, r0
 800056a:	1a1b      	subs	r3, r3, r0
 800056c:	2b96      	cmp	r3, #150	; 0x96
 800056e:	dc0c      	bgt.n	800058a <__aeabi_ui2f+0x2e>
 8000570:	2808      	cmp	r0, #8
 8000572:	dd01      	ble.n	8000578 <__aeabi_ui2f+0x1c>
 8000574:	3c08      	subs	r4, #8
 8000576:	40a5      	lsls	r5, r4
 8000578:	026d      	lsls	r5, r5, #9
 800057a:	0a6d      	lsrs	r5, r5, #9
 800057c:	b2d8      	uxtb	r0, r3
 800057e:	e001      	b.n	8000584 <__aeabi_ui2f+0x28>
 8000580:	2000      	movs	r0, #0
 8000582:	2500      	movs	r5, #0
 8000584:	05c0      	lsls	r0, r0, #23
 8000586:	4328      	orrs	r0, r5
 8000588:	bd70      	pop	{r4, r5, r6, pc}
 800058a:	2b99      	cmp	r3, #153	; 0x99
 800058c:	dd09      	ble.n	80005a2 <__aeabi_ui2f+0x46>
 800058e:	0002      	movs	r2, r0
 8000590:	0029      	movs	r1, r5
 8000592:	321b      	adds	r2, #27
 8000594:	4091      	lsls	r1, r2
 8000596:	1e4a      	subs	r2, r1, #1
 8000598:	4191      	sbcs	r1, r2
 800059a:	2205      	movs	r2, #5
 800059c:	1a12      	subs	r2, r2, r0
 800059e:	40d5      	lsrs	r5, r2
 80005a0:	430d      	orrs	r5, r1
 80005a2:	2c05      	cmp	r4, #5
 80005a4:	dc12      	bgt.n	80005cc <__aeabi_ui2f+0x70>
 80005a6:	0029      	movs	r1, r5
 80005a8:	4e0c      	ldr	r6, [pc, #48]	; (80005dc <__aeabi_ui2f+0x80>)
 80005aa:	4031      	ands	r1, r6
 80005ac:	076a      	lsls	r2, r5, #29
 80005ae:	d009      	beq.n	80005c4 <__aeabi_ui2f+0x68>
 80005b0:	200f      	movs	r0, #15
 80005b2:	4028      	ands	r0, r5
 80005b4:	2804      	cmp	r0, #4
 80005b6:	d005      	beq.n	80005c4 <__aeabi_ui2f+0x68>
 80005b8:	3104      	adds	r1, #4
 80005ba:	014a      	lsls	r2, r1, #5
 80005bc:	d502      	bpl.n	80005c4 <__aeabi_ui2f+0x68>
 80005be:	239f      	movs	r3, #159	; 0x9f
 80005c0:	4031      	ands	r1, r6
 80005c2:	1b1b      	subs	r3, r3, r4
 80005c4:	0189      	lsls	r1, r1, #6
 80005c6:	0a4d      	lsrs	r5, r1, #9
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	e7db      	b.n	8000584 <__aeabi_ui2f+0x28>
 80005cc:	1f62      	subs	r2, r4, #5
 80005ce:	4095      	lsls	r5, r2
 80005d0:	0029      	movs	r1, r5
 80005d2:	4e02      	ldr	r6, [pc, #8]	; (80005dc <__aeabi_ui2f+0x80>)
 80005d4:	4031      	ands	r1, r6
 80005d6:	076a      	lsls	r2, r5, #29
 80005d8:	d0f4      	beq.n	80005c4 <__aeabi_ui2f+0x68>
 80005da:	e7e9      	b.n	80005b0 <__aeabi_ui2f+0x54>
 80005dc:	fbffffff 	.word	0xfbffffff

080005e0 <__aeabi_ddiv>:
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	4657      	mov	r7, sl
 80005e4:	464e      	mov	r6, r9
 80005e6:	4645      	mov	r5, r8
 80005e8:	46de      	mov	lr, fp
 80005ea:	b5e0      	push	{r5, r6, r7, lr}
 80005ec:	4681      	mov	r9, r0
 80005ee:	0005      	movs	r5, r0
 80005f0:	030c      	lsls	r4, r1, #12
 80005f2:	0048      	lsls	r0, r1, #1
 80005f4:	4692      	mov	sl, r2
 80005f6:	001f      	movs	r7, r3
 80005f8:	b085      	sub	sp, #20
 80005fa:	0b24      	lsrs	r4, r4, #12
 80005fc:	0d40      	lsrs	r0, r0, #21
 80005fe:	0fce      	lsrs	r6, r1, #31
 8000600:	2800      	cmp	r0, #0
 8000602:	d100      	bne.n	8000606 <__aeabi_ddiv+0x26>
 8000604:	e156      	b.n	80008b4 <__aeabi_ddiv+0x2d4>
 8000606:	4bd4      	ldr	r3, [pc, #848]	; (8000958 <__aeabi_ddiv+0x378>)
 8000608:	4298      	cmp	r0, r3
 800060a:	d100      	bne.n	800060e <__aeabi_ddiv+0x2e>
 800060c:	e172      	b.n	80008f4 <__aeabi_ddiv+0x314>
 800060e:	0f6b      	lsrs	r3, r5, #29
 8000610:	00e4      	lsls	r4, r4, #3
 8000612:	431c      	orrs	r4, r3
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	4323      	orrs	r3, r4
 800061a:	4698      	mov	r8, r3
 800061c:	4bcf      	ldr	r3, [pc, #828]	; (800095c <__aeabi_ddiv+0x37c>)
 800061e:	00ed      	lsls	r5, r5, #3
 8000620:	469b      	mov	fp, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4699      	mov	r9, r3
 8000626:	4483      	add	fp, r0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	033c      	lsls	r4, r7, #12
 800062c:	007b      	lsls	r3, r7, #1
 800062e:	4650      	mov	r0, sl
 8000630:	0b24      	lsrs	r4, r4, #12
 8000632:	0d5b      	lsrs	r3, r3, #21
 8000634:	0fff      	lsrs	r7, r7, #31
 8000636:	2b00      	cmp	r3, #0
 8000638:	d100      	bne.n	800063c <__aeabi_ddiv+0x5c>
 800063a:	e11f      	b.n	800087c <__aeabi_ddiv+0x29c>
 800063c:	4ac6      	ldr	r2, [pc, #792]	; (8000958 <__aeabi_ddiv+0x378>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x64>
 8000642:	e162      	b.n	800090a <__aeabi_ddiv+0x32a>
 8000644:	49c5      	ldr	r1, [pc, #788]	; (800095c <__aeabi_ddiv+0x37c>)
 8000646:	0f42      	lsrs	r2, r0, #29
 8000648:	468c      	mov	ip, r1
 800064a:	00e4      	lsls	r4, r4, #3
 800064c:	4659      	mov	r1, fp
 800064e:	4314      	orrs	r4, r2
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	4463      	add	r3, ip
 8000654:	0412      	lsls	r2, r2, #16
 8000656:	1acb      	subs	r3, r1, r3
 8000658:	4314      	orrs	r4, r2
 800065a:	469b      	mov	fp, r3
 800065c:	00c2      	lsls	r2, r0, #3
 800065e:	2000      	movs	r0, #0
 8000660:	0033      	movs	r3, r6
 8000662:	407b      	eors	r3, r7
 8000664:	469a      	mov	sl, r3
 8000666:	464b      	mov	r3, r9
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d827      	bhi.n	80006bc <__aeabi_ddiv+0xdc>
 800066c:	49bc      	ldr	r1, [pc, #752]	; (8000960 <__aeabi_ddiv+0x380>)
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	58cb      	ldr	r3, [r1, r3]
 8000672:	469f      	mov	pc, r3
 8000674:	46b2      	mov	sl, r6
 8000676:	9b00      	ldr	r3, [sp, #0]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d016      	beq.n	80006aa <__aeabi_ddiv+0xca>
 800067c:	2b03      	cmp	r3, #3
 800067e:	d100      	bne.n	8000682 <__aeabi_ddiv+0xa2>
 8000680:	e28e      	b.n	8000ba0 <__aeabi_ddiv+0x5c0>
 8000682:	2b01      	cmp	r3, #1
 8000684:	d000      	beq.n	8000688 <__aeabi_ddiv+0xa8>
 8000686:	e0d9      	b.n	800083c <__aeabi_ddiv+0x25c>
 8000688:	2300      	movs	r3, #0
 800068a:	2400      	movs	r4, #0
 800068c:	2500      	movs	r5, #0
 800068e:	4652      	mov	r2, sl
 8000690:	051b      	lsls	r3, r3, #20
 8000692:	4323      	orrs	r3, r4
 8000694:	07d2      	lsls	r2, r2, #31
 8000696:	4313      	orrs	r3, r2
 8000698:	0028      	movs	r0, r5
 800069a:	0019      	movs	r1, r3
 800069c:	b005      	add	sp, #20
 800069e:	bcf0      	pop	{r4, r5, r6, r7}
 80006a0:	46bb      	mov	fp, r7
 80006a2:	46b2      	mov	sl, r6
 80006a4:	46a9      	mov	r9, r5
 80006a6:	46a0      	mov	r8, r4
 80006a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006aa:	2400      	movs	r4, #0
 80006ac:	2500      	movs	r5, #0
 80006ae:	4baa      	ldr	r3, [pc, #680]	; (8000958 <__aeabi_ddiv+0x378>)
 80006b0:	e7ed      	b.n	800068e <__aeabi_ddiv+0xae>
 80006b2:	46ba      	mov	sl, r7
 80006b4:	46a0      	mov	r8, r4
 80006b6:	0015      	movs	r5, r2
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	e7dc      	b.n	8000676 <__aeabi_ddiv+0x96>
 80006bc:	4544      	cmp	r4, r8
 80006be:	d200      	bcs.n	80006c2 <__aeabi_ddiv+0xe2>
 80006c0:	e1c7      	b.n	8000a52 <__aeabi_ddiv+0x472>
 80006c2:	d100      	bne.n	80006c6 <__aeabi_ddiv+0xe6>
 80006c4:	e1c2      	b.n	8000a4c <__aeabi_ddiv+0x46c>
 80006c6:	2301      	movs	r3, #1
 80006c8:	425b      	negs	r3, r3
 80006ca:	469c      	mov	ip, r3
 80006cc:	002e      	movs	r6, r5
 80006ce:	4640      	mov	r0, r8
 80006d0:	2500      	movs	r5, #0
 80006d2:	44e3      	add	fp, ip
 80006d4:	0223      	lsls	r3, r4, #8
 80006d6:	0e14      	lsrs	r4, r2, #24
 80006d8:	431c      	orrs	r4, r3
 80006da:	0c1b      	lsrs	r3, r3, #16
 80006dc:	4699      	mov	r9, r3
 80006de:	0423      	lsls	r3, r4, #16
 80006e0:	0c1f      	lsrs	r7, r3, #16
 80006e2:	0212      	lsls	r2, r2, #8
 80006e4:	4649      	mov	r1, r9
 80006e6:	9200      	str	r2, [sp, #0]
 80006e8:	9701      	str	r7, [sp, #4]
 80006ea:	f7ff fd93 	bl	8000214 <__aeabi_uidivmod>
 80006ee:	0002      	movs	r2, r0
 80006f0:	437a      	muls	r2, r7
 80006f2:	040b      	lsls	r3, r1, #16
 80006f4:	0c31      	lsrs	r1, r6, #16
 80006f6:	4680      	mov	r8, r0
 80006f8:	4319      	orrs	r1, r3
 80006fa:	428a      	cmp	r2, r1
 80006fc:	d907      	bls.n	800070e <__aeabi_ddiv+0x12e>
 80006fe:	2301      	movs	r3, #1
 8000700:	425b      	negs	r3, r3
 8000702:	469c      	mov	ip, r3
 8000704:	1909      	adds	r1, r1, r4
 8000706:	44e0      	add	r8, ip
 8000708:	428c      	cmp	r4, r1
 800070a:	d800      	bhi.n	800070e <__aeabi_ddiv+0x12e>
 800070c:	e207      	b.n	8000b1e <__aeabi_ddiv+0x53e>
 800070e:	1a88      	subs	r0, r1, r2
 8000710:	4649      	mov	r1, r9
 8000712:	f7ff fd7f 	bl	8000214 <__aeabi_uidivmod>
 8000716:	0409      	lsls	r1, r1, #16
 8000718:	468c      	mov	ip, r1
 800071a:	0431      	lsls	r1, r6, #16
 800071c:	4666      	mov	r6, ip
 800071e:	9a01      	ldr	r2, [sp, #4]
 8000720:	0c09      	lsrs	r1, r1, #16
 8000722:	4342      	muls	r2, r0
 8000724:	0003      	movs	r3, r0
 8000726:	4331      	orrs	r1, r6
 8000728:	428a      	cmp	r2, r1
 800072a:	d904      	bls.n	8000736 <__aeabi_ddiv+0x156>
 800072c:	1909      	adds	r1, r1, r4
 800072e:	3b01      	subs	r3, #1
 8000730:	428c      	cmp	r4, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x156>
 8000734:	e1ed      	b.n	8000b12 <__aeabi_ddiv+0x532>
 8000736:	1a88      	subs	r0, r1, r2
 8000738:	4642      	mov	r2, r8
 800073a:	0412      	lsls	r2, r2, #16
 800073c:	431a      	orrs	r2, r3
 800073e:	4690      	mov	r8, r2
 8000740:	4641      	mov	r1, r8
 8000742:	9b00      	ldr	r3, [sp, #0]
 8000744:	040e      	lsls	r6, r1, #16
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	001f      	movs	r7, r3
 800074a:	9302      	str	r3, [sp, #8]
 800074c:	9b00      	ldr	r3, [sp, #0]
 800074e:	0c36      	lsrs	r6, r6, #16
 8000750:	041b      	lsls	r3, r3, #16
 8000752:	0c19      	lsrs	r1, r3, #16
 8000754:	000b      	movs	r3, r1
 8000756:	4373      	muls	r3, r6
 8000758:	0c12      	lsrs	r2, r2, #16
 800075a:	437e      	muls	r6, r7
 800075c:	9103      	str	r1, [sp, #12]
 800075e:	4351      	muls	r1, r2
 8000760:	437a      	muls	r2, r7
 8000762:	0c1f      	lsrs	r7, r3, #16
 8000764:	46bc      	mov	ip, r7
 8000766:	1876      	adds	r6, r6, r1
 8000768:	4466      	add	r6, ip
 800076a:	42b1      	cmp	r1, r6
 800076c:	d903      	bls.n	8000776 <__aeabi_ddiv+0x196>
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	0249      	lsls	r1, r1, #9
 8000772:	468c      	mov	ip, r1
 8000774:	4462      	add	r2, ip
 8000776:	0c31      	lsrs	r1, r6, #16
 8000778:	188a      	adds	r2, r1, r2
 800077a:	0431      	lsls	r1, r6, #16
 800077c:	041e      	lsls	r6, r3, #16
 800077e:	0c36      	lsrs	r6, r6, #16
 8000780:	198e      	adds	r6, r1, r6
 8000782:	4290      	cmp	r0, r2
 8000784:	d302      	bcc.n	800078c <__aeabi_ddiv+0x1ac>
 8000786:	d112      	bne.n	80007ae <__aeabi_ddiv+0x1ce>
 8000788:	42b5      	cmp	r5, r6
 800078a:	d210      	bcs.n	80007ae <__aeabi_ddiv+0x1ce>
 800078c:	4643      	mov	r3, r8
 800078e:	1e59      	subs	r1, r3, #1
 8000790:	9b00      	ldr	r3, [sp, #0]
 8000792:	469c      	mov	ip, r3
 8000794:	4465      	add	r5, ip
 8000796:	001f      	movs	r7, r3
 8000798:	429d      	cmp	r5, r3
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	191b      	adds	r3, r3, r4
 80007a0:	18c0      	adds	r0, r0, r3
 80007a2:	4284      	cmp	r4, r0
 80007a4:	d200      	bcs.n	80007a8 <__aeabi_ddiv+0x1c8>
 80007a6:	e1a0      	b.n	8000aea <__aeabi_ddiv+0x50a>
 80007a8:	d100      	bne.n	80007ac <__aeabi_ddiv+0x1cc>
 80007aa:	e19b      	b.n	8000ae4 <__aeabi_ddiv+0x504>
 80007ac:	4688      	mov	r8, r1
 80007ae:	1bae      	subs	r6, r5, r6
 80007b0:	42b5      	cmp	r5, r6
 80007b2:	41ad      	sbcs	r5, r5
 80007b4:	1a80      	subs	r0, r0, r2
 80007b6:	426d      	negs	r5, r5
 80007b8:	1b40      	subs	r0, r0, r5
 80007ba:	4284      	cmp	r4, r0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_ddiv+0x1e0>
 80007be:	e1d5      	b.n	8000b6c <__aeabi_ddiv+0x58c>
 80007c0:	4649      	mov	r1, r9
 80007c2:	f7ff fd27 	bl	8000214 <__aeabi_uidivmod>
 80007c6:	9a01      	ldr	r2, [sp, #4]
 80007c8:	040b      	lsls	r3, r1, #16
 80007ca:	4342      	muls	r2, r0
 80007cc:	0c31      	lsrs	r1, r6, #16
 80007ce:	0005      	movs	r5, r0
 80007d0:	4319      	orrs	r1, r3
 80007d2:	428a      	cmp	r2, r1
 80007d4:	d900      	bls.n	80007d8 <__aeabi_ddiv+0x1f8>
 80007d6:	e16c      	b.n	8000ab2 <__aeabi_ddiv+0x4d2>
 80007d8:	1a88      	subs	r0, r1, r2
 80007da:	4649      	mov	r1, r9
 80007dc:	f7ff fd1a 	bl	8000214 <__aeabi_uidivmod>
 80007e0:	9a01      	ldr	r2, [sp, #4]
 80007e2:	0436      	lsls	r6, r6, #16
 80007e4:	4342      	muls	r2, r0
 80007e6:	0409      	lsls	r1, r1, #16
 80007e8:	0c36      	lsrs	r6, r6, #16
 80007ea:	0003      	movs	r3, r0
 80007ec:	430e      	orrs	r6, r1
 80007ee:	42b2      	cmp	r2, r6
 80007f0:	d900      	bls.n	80007f4 <__aeabi_ddiv+0x214>
 80007f2:	e153      	b.n	8000a9c <__aeabi_ddiv+0x4bc>
 80007f4:	9803      	ldr	r0, [sp, #12]
 80007f6:	1ab6      	subs	r6, r6, r2
 80007f8:	0002      	movs	r2, r0
 80007fa:	042d      	lsls	r5, r5, #16
 80007fc:	431d      	orrs	r5, r3
 80007fe:	9f02      	ldr	r7, [sp, #8]
 8000800:	042b      	lsls	r3, r5, #16
 8000802:	0c1b      	lsrs	r3, r3, #16
 8000804:	435a      	muls	r2, r3
 8000806:	437b      	muls	r3, r7
 8000808:	469c      	mov	ip, r3
 800080a:	0c29      	lsrs	r1, r5, #16
 800080c:	4348      	muls	r0, r1
 800080e:	0c13      	lsrs	r3, r2, #16
 8000810:	4484      	add	ip, r0
 8000812:	4463      	add	r3, ip
 8000814:	4379      	muls	r1, r7
 8000816:	4298      	cmp	r0, r3
 8000818:	d903      	bls.n	8000822 <__aeabi_ddiv+0x242>
 800081a:	2080      	movs	r0, #128	; 0x80
 800081c:	0240      	lsls	r0, r0, #9
 800081e:	4684      	mov	ip, r0
 8000820:	4461      	add	r1, ip
 8000822:	0c18      	lsrs	r0, r3, #16
 8000824:	0412      	lsls	r2, r2, #16
 8000826:	041b      	lsls	r3, r3, #16
 8000828:	0c12      	lsrs	r2, r2, #16
 800082a:	1841      	adds	r1, r0, r1
 800082c:	189b      	adds	r3, r3, r2
 800082e:	428e      	cmp	r6, r1
 8000830:	d200      	bcs.n	8000834 <__aeabi_ddiv+0x254>
 8000832:	e0ff      	b.n	8000a34 <__aeabi_ddiv+0x454>
 8000834:	d100      	bne.n	8000838 <__aeabi_ddiv+0x258>
 8000836:	e0fa      	b.n	8000a2e <__aeabi_ddiv+0x44e>
 8000838:	2301      	movs	r3, #1
 800083a:	431d      	orrs	r5, r3
 800083c:	4a49      	ldr	r2, [pc, #292]	; (8000964 <__aeabi_ddiv+0x384>)
 800083e:	445a      	add	r2, fp
 8000840:	2a00      	cmp	r2, #0
 8000842:	dc00      	bgt.n	8000846 <__aeabi_ddiv+0x266>
 8000844:	e0aa      	b.n	800099c <__aeabi_ddiv+0x3bc>
 8000846:	076b      	lsls	r3, r5, #29
 8000848:	d000      	beq.n	800084c <__aeabi_ddiv+0x26c>
 800084a:	e13d      	b.n	8000ac8 <__aeabi_ddiv+0x4e8>
 800084c:	08ed      	lsrs	r5, r5, #3
 800084e:	4643      	mov	r3, r8
 8000850:	01db      	lsls	r3, r3, #7
 8000852:	d506      	bpl.n	8000862 <__aeabi_ddiv+0x282>
 8000854:	4642      	mov	r2, r8
 8000856:	4b44      	ldr	r3, [pc, #272]	; (8000968 <__aeabi_ddiv+0x388>)
 8000858:	401a      	ands	r2, r3
 800085a:	4690      	mov	r8, r2
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	00d2      	lsls	r2, r2, #3
 8000860:	445a      	add	r2, fp
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <__aeabi_ddiv+0x38c>)
 8000864:	429a      	cmp	r2, r3
 8000866:	dd00      	ble.n	800086a <__aeabi_ddiv+0x28a>
 8000868:	e71f      	b.n	80006aa <__aeabi_ddiv+0xca>
 800086a:	4643      	mov	r3, r8
 800086c:	075b      	lsls	r3, r3, #29
 800086e:	431d      	orrs	r5, r3
 8000870:	4643      	mov	r3, r8
 8000872:	0552      	lsls	r2, r2, #21
 8000874:	025c      	lsls	r4, r3, #9
 8000876:	0b24      	lsrs	r4, r4, #12
 8000878:	0d53      	lsrs	r3, r2, #21
 800087a:	e708      	b.n	800068e <__aeabi_ddiv+0xae>
 800087c:	4652      	mov	r2, sl
 800087e:	4322      	orrs	r2, r4
 8000880:	d100      	bne.n	8000884 <__aeabi_ddiv+0x2a4>
 8000882:	e07b      	b.n	800097c <__aeabi_ddiv+0x39c>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d100      	bne.n	800088a <__aeabi_ddiv+0x2aa>
 8000888:	e0fa      	b.n	8000a80 <__aeabi_ddiv+0x4a0>
 800088a:	0020      	movs	r0, r4
 800088c:	f000 fc88 	bl	80011a0 <__clzsi2>
 8000890:	0002      	movs	r2, r0
 8000892:	3a0b      	subs	r2, #11
 8000894:	231d      	movs	r3, #29
 8000896:	0001      	movs	r1, r0
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	4652      	mov	r2, sl
 800089c:	3908      	subs	r1, #8
 800089e:	40da      	lsrs	r2, r3
 80008a0:	408c      	lsls	r4, r1
 80008a2:	4314      	orrs	r4, r2
 80008a4:	4652      	mov	r2, sl
 80008a6:	408a      	lsls	r2, r1
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <__aeabi_ddiv+0x390>)
 80008aa:	4458      	add	r0, fp
 80008ac:	469b      	mov	fp, r3
 80008ae:	4483      	add	fp, r0
 80008b0:	2000      	movs	r0, #0
 80008b2:	e6d5      	b.n	8000660 <__aeabi_ddiv+0x80>
 80008b4:	464b      	mov	r3, r9
 80008b6:	4323      	orrs	r3, r4
 80008b8:	4698      	mov	r8, r3
 80008ba:	d044      	beq.n	8000946 <__aeabi_ddiv+0x366>
 80008bc:	2c00      	cmp	r4, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_ddiv+0x2e2>
 80008c0:	e0ce      	b.n	8000a60 <__aeabi_ddiv+0x480>
 80008c2:	0020      	movs	r0, r4
 80008c4:	f000 fc6c 	bl	80011a0 <__clzsi2>
 80008c8:	0001      	movs	r1, r0
 80008ca:	0002      	movs	r2, r0
 80008cc:	390b      	subs	r1, #11
 80008ce:	231d      	movs	r3, #29
 80008d0:	1a5b      	subs	r3, r3, r1
 80008d2:	4649      	mov	r1, r9
 80008d4:	0010      	movs	r0, r2
 80008d6:	40d9      	lsrs	r1, r3
 80008d8:	3808      	subs	r0, #8
 80008da:	4084      	lsls	r4, r0
 80008dc:	000b      	movs	r3, r1
 80008de:	464d      	mov	r5, r9
 80008e0:	4323      	orrs	r3, r4
 80008e2:	4698      	mov	r8, r3
 80008e4:	4085      	lsls	r5, r0
 80008e6:	4823      	ldr	r0, [pc, #140]	; (8000974 <__aeabi_ddiv+0x394>)
 80008e8:	1a83      	subs	r3, r0, r2
 80008ea:	469b      	mov	fp, r3
 80008ec:	2300      	movs	r3, #0
 80008ee:	4699      	mov	r9, r3
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	e69a      	b.n	800062a <__aeabi_ddiv+0x4a>
 80008f4:	464b      	mov	r3, r9
 80008f6:	4323      	orrs	r3, r4
 80008f8:	4698      	mov	r8, r3
 80008fa:	d11d      	bne.n	8000938 <__aeabi_ddiv+0x358>
 80008fc:	2308      	movs	r3, #8
 80008fe:	4699      	mov	r9, r3
 8000900:	3b06      	subs	r3, #6
 8000902:	2500      	movs	r5, #0
 8000904:	4683      	mov	fp, r0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	e68f      	b.n	800062a <__aeabi_ddiv+0x4a>
 800090a:	4652      	mov	r2, sl
 800090c:	4322      	orrs	r2, r4
 800090e:	d109      	bne.n	8000924 <__aeabi_ddiv+0x344>
 8000910:	2302      	movs	r3, #2
 8000912:	4649      	mov	r1, r9
 8000914:	4319      	orrs	r1, r3
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <__aeabi_ddiv+0x398>)
 8000918:	4689      	mov	r9, r1
 800091a:	469c      	mov	ip, r3
 800091c:	2400      	movs	r4, #0
 800091e:	2002      	movs	r0, #2
 8000920:	44e3      	add	fp, ip
 8000922:	e69d      	b.n	8000660 <__aeabi_ddiv+0x80>
 8000924:	2303      	movs	r3, #3
 8000926:	464a      	mov	r2, r9
 8000928:	431a      	orrs	r2, r3
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <__aeabi_ddiv+0x398>)
 800092c:	4691      	mov	r9, r2
 800092e:	469c      	mov	ip, r3
 8000930:	4652      	mov	r2, sl
 8000932:	2003      	movs	r0, #3
 8000934:	44e3      	add	fp, ip
 8000936:	e693      	b.n	8000660 <__aeabi_ddiv+0x80>
 8000938:	230c      	movs	r3, #12
 800093a:	4699      	mov	r9, r3
 800093c:	3b09      	subs	r3, #9
 800093e:	46a0      	mov	r8, r4
 8000940:	4683      	mov	fp, r0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	e671      	b.n	800062a <__aeabi_ddiv+0x4a>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	2300      	movs	r3, #0
 800094c:	469b      	mov	fp, r3
 800094e:	3301      	adds	r3, #1
 8000950:	2500      	movs	r5, #0
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	e669      	b.n	800062a <__aeabi_ddiv+0x4a>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	000007ff 	.word	0x000007ff
 800095c:	fffffc01 	.word	0xfffffc01
 8000960:	08004088 	.word	0x08004088
 8000964:	000003ff 	.word	0x000003ff
 8000968:	feffffff 	.word	0xfeffffff
 800096c:	000007fe 	.word	0x000007fe
 8000970:	000003f3 	.word	0x000003f3
 8000974:	fffffc0d 	.word	0xfffffc0d
 8000978:	fffff801 	.word	0xfffff801
 800097c:	4649      	mov	r1, r9
 800097e:	2301      	movs	r3, #1
 8000980:	4319      	orrs	r1, r3
 8000982:	4689      	mov	r9, r1
 8000984:	2400      	movs	r4, #0
 8000986:	2001      	movs	r0, #1
 8000988:	e66a      	b.n	8000660 <__aeabi_ddiv+0x80>
 800098a:	2300      	movs	r3, #0
 800098c:	2480      	movs	r4, #128	; 0x80
 800098e:	469a      	mov	sl, r3
 8000990:	2500      	movs	r5, #0
 8000992:	4b8a      	ldr	r3, [pc, #552]	; (8000bbc <__aeabi_ddiv+0x5dc>)
 8000994:	0324      	lsls	r4, r4, #12
 8000996:	e67a      	b.n	800068e <__aeabi_ddiv+0xae>
 8000998:	2501      	movs	r5, #1
 800099a:	426d      	negs	r5, r5
 800099c:	2301      	movs	r3, #1
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	2b38      	cmp	r3, #56	; 0x38
 80009a2:	dd00      	ble.n	80009a6 <__aeabi_ddiv+0x3c6>
 80009a4:	e670      	b.n	8000688 <__aeabi_ddiv+0xa8>
 80009a6:	2b1f      	cmp	r3, #31
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_ddiv+0x3cc>
 80009aa:	e0bf      	b.n	8000b2c <__aeabi_ddiv+0x54c>
 80009ac:	211f      	movs	r1, #31
 80009ae:	4249      	negs	r1, r1
 80009b0:	1a8a      	subs	r2, r1, r2
 80009b2:	4641      	mov	r1, r8
 80009b4:	40d1      	lsrs	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	2b20      	cmp	r3, #32
 80009ba:	d004      	beq.n	80009c6 <__aeabi_ddiv+0x3e6>
 80009bc:	4641      	mov	r1, r8
 80009be:	4b80      	ldr	r3, [pc, #512]	; (8000bc0 <__aeabi_ddiv+0x5e0>)
 80009c0:	445b      	add	r3, fp
 80009c2:	4099      	lsls	r1, r3
 80009c4:	430d      	orrs	r5, r1
 80009c6:	1e6b      	subs	r3, r5, #1
 80009c8:	419d      	sbcs	r5, r3
 80009ca:	2307      	movs	r3, #7
 80009cc:	432a      	orrs	r2, r5
 80009ce:	001d      	movs	r5, r3
 80009d0:	2400      	movs	r4, #0
 80009d2:	4015      	ands	r5, r2
 80009d4:	4213      	tst	r3, r2
 80009d6:	d100      	bne.n	80009da <__aeabi_ddiv+0x3fa>
 80009d8:	e0d4      	b.n	8000b84 <__aeabi_ddiv+0x5a4>
 80009da:	210f      	movs	r1, #15
 80009dc:	2300      	movs	r3, #0
 80009de:	4011      	ands	r1, r2
 80009e0:	2904      	cmp	r1, #4
 80009e2:	d100      	bne.n	80009e6 <__aeabi_ddiv+0x406>
 80009e4:	e0cb      	b.n	8000b7e <__aeabi_ddiv+0x59e>
 80009e6:	1d11      	adds	r1, r2, #4
 80009e8:	4291      	cmp	r1, r2
 80009ea:	4192      	sbcs	r2, r2
 80009ec:	4252      	negs	r2, r2
 80009ee:	189b      	adds	r3, r3, r2
 80009f0:	000a      	movs	r2, r1
 80009f2:	0219      	lsls	r1, r3, #8
 80009f4:	d400      	bmi.n	80009f8 <__aeabi_ddiv+0x418>
 80009f6:	e0c2      	b.n	8000b7e <__aeabi_ddiv+0x59e>
 80009f8:	2301      	movs	r3, #1
 80009fa:	2400      	movs	r4, #0
 80009fc:	2500      	movs	r5, #0
 80009fe:	e646      	b.n	800068e <__aeabi_ddiv+0xae>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	4641      	mov	r1, r8
 8000a04:	031b      	lsls	r3, r3, #12
 8000a06:	4219      	tst	r1, r3
 8000a08:	d008      	beq.n	8000a1c <__aeabi_ddiv+0x43c>
 8000a0a:	421c      	tst	r4, r3
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x43c>
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	0324      	lsls	r4, r4, #12
 8000a12:	46ba      	mov	sl, r7
 8000a14:	0015      	movs	r5, r2
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <__aeabi_ddiv+0x5dc>)
 8000a18:	0b24      	lsrs	r4, r4, #12
 8000a1a:	e638      	b.n	800068e <__aeabi_ddiv+0xae>
 8000a1c:	2480      	movs	r4, #128	; 0x80
 8000a1e:	4643      	mov	r3, r8
 8000a20:	0324      	lsls	r4, r4, #12
 8000a22:	431c      	orrs	r4, r3
 8000a24:	0324      	lsls	r4, r4, #12
 8000a26:	46b2      	mov	sl, r6
 8000a28:	4b64      	ldr	r3, [pc, #400]	; (8000bbc <__aeabi_ddiv+0x5dc>)
 8000a2a:	0b24      	lsrs	r4, r4, #12
 8000a2c:	e62f      	b.n	800068e <__aeabi_ddiv+0xae>
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <__aeabi_ddiv+0x454>
 8000a32:	e703      	b.n	800083c <__aeabi_ddiv+0x25c>
 8000a34:	19a6      	adds	r6, r4, r6
 8000a36:	1e68      	subs	r0, r5, #1
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d200      	bcs.n	8000a3e <__aeabi_ddiv+0x45e>
 8000a3c:	e08d      	b.n	8000b5a <__aeabi_ddiv+0x57a>
 8000a3e:	428e      	cmp	r6, r1
 8000a40:	d200      	bcs.n	8000a44 <__aeabi_ddiv+0x464>
 8000a42:	e0a3      	b.n	8000b8c <__aeabi_ddiv+0x5ac>
 8000a44:	d100      	bne.n	8000a48 <__aeabi_ddiv+0x468>
 8000a46:	e0b3      	b.n	8000bb0 <__aeabi_ddiv+0x5d0>
 8000a48:	0005      	movs	r5, r0
 8000a4a:	e6f5      	b.n	8000838 <__aeabi_ddiv+0x258>
 8000a4c:	42aa      	cmp	r2, r5
 8000a4e:	d900      	bls.n	8000a52 <__aeabi_ddiv+0x472>
 8000a50:	e639      	b.n	80006c6 <__aeabi_ddiv+0xe6>
 8000a52:	4643      	mov	r3, r8
 8000a54:	07de      	lsls	r6, r3, #31
 8000a56:	0858      	lsrs	r0, r3, #1
 8000a58:	086b      	lsrs	r3, r5, #1
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	07ed      	lsls	r5, r5, #31
 8000a5e:	e639      	b.n	80006d4 <__aeabi_ddiv+0xf4>
 8000a60:	4648      	mov	r0, r9
 8000a62:	f000 fb9d 	bl	80011a0 <__clzsi2>
 8000a66:	0001      	movs	r1, r0
 8000a68:	0002      	movs	r2, r0
 8000a6a:	3115      	adds	r1, #21
 8000a6c:	3220      	adds	r2, #32
 8000a6e:	291c      	cmp	r1, #28
 8000a70:	dc00      	bgt.n	8000a74 <__aeabi_ddiv+0x494>
 8000a72:	e72c      	b.n	80008ce <__aeabi_ddiv+0x2ee>
 8000a74:	464b      	mov	r3, r9
 8000a76:	3808      	subs	r0, #8
 8000a78:	4083      	lsls	r3, r0
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	e732      	b.n	80008e6 <__aeabi_ddiv+0x306>
 8000a80:	f000 fb8e 	bl	80011a0 <__clzsi2>
 8000a84:	0003      	movs	r3, r0
 8000a86:	001a      	movs	r2, r3
 8000a88:	3215      	adds	r2, #21
 8000a8a:	3020      	adds	r0, #32
 8000a8c:	2a1c      	cmp	r2, #28
 8000a8e:	dc00      	bgt.n	8000a92 <__aeabi_ddiv+0x4b2>
 8000a90:	e700      	b.n	8000894 <__aeabi_ddiv+0x2b4>
 8000a92:	4654      	mov	r4, sl
 8000a94:	3b08      	subs	r3, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	409c      	lsls	r4, r3
 8000a9a:	e705      	b.n	80008a8 <__aeabi_ddiv+0x2c8>
 8000a9c:	1936      	adds	r6, r6, r4
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	42b4      	cmp	r4, r6
 8000aa2:	d900      	bls.n	8000aa6 <__aeabi_ddiv+0x4c6>
 8000aa4:	e6a6      	b.n	80007f4 <__aeabi_ddiv+0x214>
 8000aa6:	42b2      	cmp	r2, r6
 8000aa8:	d800      	bhi.n	8000aac <__aeabi_ddiv+0x4cc>
 8000aaa:	e6a3      	b.n	80007f4 <__aeabi_ddiv+0x214>
 8000aac:	1e83      	subs	r3, r0, #2
 8000aae:	1936      	adds	r6, r6, r4
 8000ab0:	e6a0      	b.n	80007f4 <__aeabi_ddiv+0x214>
 8000ab2:	1909      	adds	r1, r1, r4
 8000ab4:	3d01      	subs	r5, #1
 8000ab6:	428c      	cmp	r4, r1
 8000ab8:	d900      	bls.n	8000abc <__aeabi_ddiv+0x4dc>
 8000aba:	e68d      	b.n	80007d8 <__aeabi_ddiv+0x1f8>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	d800      	bhi.n	8000ac2 <__aeabi_ddiv+0x4e2>
 8000ac0:	e68a      	b.n	80007d8 <__aeabi_ddiv+0x1f8>
 8000ac2:	1e85      	subs	r5, r0, #2
 8000ac4:	1909      	adds	r1, r1, r4
 8000ac6:	e687      	b.n	80007d8 <__aeabi_ddiv+0x1f8>
 8000ac8:	230f      	movs	r3, #15
 8000aca:	402b      	ands	r3, r5
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_ddiv+0x4f2>
 8000ad0:	e6bc      	b.n	800084c <__aeabi_ddiv+0x26c>
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	419b      	sbcs	r3, r3
 8000ada:	3504      	adds	r5, #4
 8000adc:	425b      	negs	r3, r3
 8000ade:	08ed      	lsrs	r5, r5, #3
 8000ae0:	4498      	add	r8, r3
 8000ae2:	e6b4      	b.n	800084e <__aeabi_ddiv+0x26e>
 8000ae4:	42af      	cmp	r7, r5
 8000ae6:	d900      	bls.n	8000aea <__aeabi_ddiv+0x50a>
 8000ae8:	e660      	b.n	80007ac <__aeabi_ddiv+0x1cc>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	d804      	bhi.n	8000af8 <__aeabi_ddiv+0x518>
 8000aee:	d000      	beq.n	8000af2 <__aeabi_ddiv+0x512>
 8000af0:	e65c      	b.n	80007ac <__aeabi_ddiv+0x1cc>
 8000af2:	42ae      	cmp	r6, r5
 8000af4:	d800      	bhi.n	8000af8 <__aeabi_ddiv+0x518>
 8000af6:	e659      	b.n	80007ac <__aeabi_ddiv+0x1cc>
 8000af8:	2302      	movs	r3, #2
 8000afa:	425b      	negs	r3, r3
 8000afc:	469c      	mov	ip, r3
 8000afe:	9b00      	ldr	r3, [sp, #0]
 8000b00:	44e0      	add	r8, ip
 8000b02:	469c      	mov	ip, r3
 8000b04:	4465      	add	r5, ip
 8000b06:	429d      	cmp	r5, r3
 8000b08:	419b      	sbcs	r3, r3
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	191b      	adds	r3, r3, r4
 8000b0e:	18c0      	adds	r0, r0, r3
 8000b10:	e64d      	b.n	80007ae <__aeabi_ddiv+0x1ce>
 8000b12:	428a      	cmp	r2, r1
 8000b14:	d800      	bhi.n	8000b18 <__aeabi_ddiv+0x538>
 8000b16:	e60e      	b.n	8000736 <__aeabi_ddiv+0x156>
 8000b18:	1e83      	subs	r3, r0, #2
 8000b1a:	1909      	adds	r1, r1, r4
 8000b1c:	e60b      	b.n	8000736 <__aeabi_ddiv+0x156>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	d800      	bhi.n	8000b24 <__aeabi_ddiv+0x544>
 8000b22:	e5f4      	b.n	800070e <__aeabi_ddiv+0x12e>
 8000b24:	1e83      	subs	r3, r0, #2
 8000b26:	4698      	mov	r8, r3
 8000b28:	1909      	adds	r1, r1, r4
 8000b2a:	e5f0      	b.n	800070e <__aeabi_ddiv+0x12e>
 8000b2c:	4925      	ldr	r1, [pc, #148]	; (8000bc4 <__aeabi_ddiv+0x5e4>)
 8000b2e:	0028      	movs	r0, r5
 8000b30:	4459      	add	r1, fp
 8000b32:	408d      	lsls	r5, r1
 8000b34:	4642      	mov	r2, r8
 8000b36:	408a      	lsls	r2, r1
 8000b38:	1e69      	subs	r1, r5, #1
 8000b3a:	418d      	sbcs	r5, r1
 8000b3c:	4641      	mov	r1, r8
 8000b3e:	40d8      	lsrs	r0, r3
 8000b40:	40d9      	lsrs	r1, r3
 8000b42:	4302      	orrs	r2, r0
 8000b44:	432a      	orrs	r2, r5
 8000b46:	000b      	movs	r3, r1
 8000b48:	0751      	lsls	r1, r2, #29
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x56e>
 8000b4c:	e751      	b.n	80009f2 <__aeabi_ddiv+0x412>
 8000b4e:	210f      	movs	r1, #15
 8000b50:	4011      	ands	r1, r2
 8000b52:	2904      	cmp	r1, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_ddiv+0x578>
 8000b56:	e746      	b.n	80009e6 <__aeabi_ddiv+0x406>
 8000b58:	e74b      	b.n	80009f2 <__aeabi_ddiv+0x412>
 8000b5a:	0005      	movs	r5, r0
 8000b5c:	428e      	cmp	r6, r1
 8000b5e:	d000      	beq.n	8000b62 <__aeabi_ddiv+0x582>
 8000b60:	e66a      	b.n	8000838 <__aeabi_ddiv+0x258>
 8000b62:	9a00      	ldr	r2, [sp, #0]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d000      	beq.n	8000b6a <__aeabi_ddiv+0x58a>
 8000b68:	e666      	b.n	8000838 <__aeabi_ddiv+0x258>
 8000b6a:	e667      	b.n	800083c <__aeabi_ddiv+0x25c>
 8000b6c:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <__aeabi_ddiv+0x5e8>)
 8000b6e:	445a      	add	r2, fp
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_ddiv+0x596>
 8000b74:	e710      	b.n	8000998 <__aeabi_ddiv+0x3b8>
 8000b76:	2301      	movs	r3, #1
 8000b78:	2500      	movs	r5, #0
 8000b7a:	4498      	add	r8, r3
 8000b7c:	e667      	b.n	800084e <__aeabi_ddiv+0x26e>
 8000b7e:	075d      	lsls	r5, r3, #29
 8000b80:	025b      	lsls	r3, r3, #9
 8000b82:	0b1c      	lsrs	r4, r3, #12
 8000b84:	08d2      	lsrs	r2, r2, #3
 8000b86:	2300      	movs	r3, #0
 8000b88:	4315      	orrs	r5, r2
 8000b8a:	e580      	b.n	800068e <__aeabi_ddiv+0xae>
 8000b8c:	9800      	ldr	r0, [sp, #0]
 8000b8e:	3d02      	subs	r5, #2
 8000b90:	0042      	lsls	r2, r0, #1
 8000b92:	4282      	cmp	r2, r0
 8000b94:	41bf      	sbcs	r7, r7
 8000b96:	427f      	negs	r7, r7
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	1936      	adds	r6, r6, r4
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	e7dd      	b.n	8000b5c <__aeabi_ddiv+0x57c>
 8000ba0:	2480      	movs	r4, #128	; 0x80
 8000ba2:	4643      	mov	r3, r8
 8000ba4:	0324      	lsls	r4, r4, #12
 8000ba6:	431c      	orrs	r4, r3
 8000ba8:	0324      	lsls	r4, r4, #12
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__aeabi_ddiv+0x5dc>)
 8000bac:	0b24      	lsrs	r4, r4, #12
 8000bae:	e56e      	b.n	800068e <__aeabi_ddiv+0xae>
 8000bb0:	9a00      	ldr	r2, [sp, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3ea      	bcc.n	8000b8c <__aeabi_ddiv+0x5ac>
 8000bb6:	0005      	movs	r5, r0
 8000bb8:	e7d3      	b.n	8000b62 <__aeabi_ddiv+0x582>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	000007ff 	.word	0x000007ff
 8000bc0:	0000043e 	.word	0x0000043e
 8000bc4:	0000041e 	.word	0x0000041e
 8000bc8:	000003ff 	.word	0x000003ff

08000bcc <__aeabi_dmul>:
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	4657      	mov	r7, sl
 8000bd0:	464e      	mov	r6, r9
 8000bd2:	4645      	mov	r5, r8
 8000bd4:	46de      	mov	lr, fp
 8000bd6:	b5e0      	push	{r5, r6, r7, lr}
 8000bd8:	4698      	mov	r8, r3
 8000bda:	030c      	lsls	r4, r1, #12
 8000bdc:	004b      	lsls	r3, r1, #1
 8000bde:	0006      	movs	r6, r0
 8000be0:	4692      	mov	sl, r2
 8000be2:	b087      	sub	sp, #28
 8000be4:	0b24      	lsrs	r4, r4, #12
 8000be6:	0d5b      	lsrs	r3, r3, #21
 8000be8:	0fcf      	lsrs	r7, r1, #31
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dmul+0x24>
 8000bee:	e15c      	b.n	8000eaa <__aeabi_dmul+0x2de>
 8000bf0:	4ad9      	ldr	r2, [pc, #868]	; (8000f58 <__aeabi_dmul+0x38c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dmul+0x2c>
 8000bf6:	e175      	b.n	8000ee4 <__aeabi_dmul+0x318>
 8000bf8:	0f42      	lsrs	r2, r0, #29
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	4314      	orrs	r4, r2
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	0412      	lsls	r2, r2, #16
 8000c02:	4314      	orrs	r4, r2
 8000c04:	4ad5      	ldr	r2, [pc, #852]	; (8000f5c <__aeabi_dmul+0x390>)
 8000c06:	00c5      	lsls	r5, r0, #3
 8000c08:	4694      	mov	ip, r2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4699      	mov	r9, r3
 8000c12:	469b      	mov	fp, r3
 8000c14:	4643      	mov	r3, r8
 8000c16:	4642      	mov	r2, r8
 8000c18:	031e      	lsls	r6, r3, #12
 8000c1a:	0fd2      	lsrs	r2, r2, #31
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4650      	mov	r0, sl
 8000c20:	4690      	mov	r8, r2
 8000c22:	0b36      	lsrs	r6, r6, #12
 8000c24:	0d5b      	lsrs	r3, r3, #21
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dmul+0x5e>
 8000c28:	e120      	b.n	8000e6c <__aeabi_dmul+0x2a0>
 8000c2a:	4acb      	ldr	r2, [pc, #812]	; (8000f58 <__aeabi_dmul+0x38c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dmul+0x66>
 8000c30:	e162      	b.n	8000ef8 <__aeabi_dmul+0x32c>
 8000c32:	49ca      	ldr	r1, [pc, #808]	; (8000f5c <__aeabi_dmul+0x390>)
 8000c34:	0f42      	lsrs	r2, r0, #29
 8000c36:	468c      	mov	ip, r1
 8000c38:	9900      	ldr	r1, [sp, #0]
 8000c3a:	4463      	add	r3, ip
 8000c3c:	00f6      	lsls	r6, r6, #3
 8000c3e:	468c      	mov	ip, r1
 8000c40:	4316      	orrs	r6, r2
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	449c      	add	ip, r3
 8000c46:	0412      	lsls	r2, r2, #16
 8000c48:	4663      	mov	r3, ip
 8000c4a:	4316      	orrs	r6, r2
 8000c4c:	00c2      	lsls	r2, r0, #3
 8000c4e:	2000      	movs	r0, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	9900      	ldr	r1, [sp, #0]
 8000c54:	4643      	mov	r3, r8
 8000c56:	3101      	adds	r1, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	407b      	eors	r3, r7
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	290f      	cmp	r1, #15
 8000c62:	d826      	bhi.n	8000cb2 <__aeabi_dmul+0xe6>
 8000c64:	4bbe      	ldr	r3, [pc, #760]	; (8000f60 <__aeabi_dmul+0x394>)
 8000c66:	0089      	lsls	r1, r1, #2
 8000c68:	5859      	ldr	r1, [r3, r1]
 8000c6a:	468f      	mov	pc, r1
 8000c6c:	4643      	mov	r3, r8
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	0034      	movs	r4, r6
 8000c72:	0015      	movs	r5, r2
 8000c74:	4683      	mov	fp, r0
 8000c76:	465b      	mov	r3, fp
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d016      	beq.n	8000caa <__aeabi_dmul+0xde>
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dmul+0xb6>
 8000c80:	e203      	b.n	800108a <__aeabi_dmul+0x4be>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dmul+0xbc>
 8000c86:	e0cd      	b.n	8000e24 <__aeabi_dmul+0x258>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	9b01      	ldr	r3, [sp, #4]
 8000c90:	0512      	lsls	r2, r2, #20
 8000c92:	4322      	orrs	r2, r4
 8000c94:	07db      	lsls	r3, r3, #31
 8000c96:	431a      	orrs	r2, r3
 8000c98:	0028      	movs	r0, r5
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	b007      	add	sp, #28
 8000c9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca0:	46bb      	mov	fp, r7
 8000ca2:	46b2      	mov	sl, r6
 8000ca4:	46a9      	mov	r9, r5
 8000ca6:	46a0      	mov	r8, r4
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000caa:	2400      	movs	r4, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	4aaa      	ldr	r2, [pc, #680]	; (8000f58 <__aeabi_dmul+0x38c>)
 8000cb0:	e7ed      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8000cb2:	0c28      	lsrs	r0, r5, #16
 8000cb4:	042d      	lsls	r5, r5, #16
 8000cb6:	0c2d      	lsrs	r5, r5, #16
 8000cb8:	002b      	movs	r3, r5
 8000cba:	0c11      	lsrs	r1, r2, #16
 8000cbc:	0412      	lsls	r2, r2, #16
 8000cbe:	0c12      	lsrs	r2, r2, #16
 8000cc0:	4353      	muls	r3, r2
 8000cc2:	4698      	mov	r8, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	002f      	movs	r7, r5
 8000cc8:	4343      	muls	r3, r0
 8000cca:	4699      	mov	r9, r3
 8000ccc:	434f      	muls	r7, r1
 8000cce:	444f      	add	r7, r9
 8000cd0:	46bb      	mov	fp, r7
 8000cd2:	4647      	mov	r7, r8
 8000cd4:	000b      	movs	r3, r1
 8000cd6:	0c3f      	lsrs	r7, r7, #16
 8000cd8:	46ba      	mov	sl, r7
 8000cda:	4343      	muls	r3, r0
 8000cdc:	44da      	add	sl, fp
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	45d1      	cmp	r9, sl
 8000ce2:	d904      	bls.n	8000cee <__aeabi_dmul+0x122>
 8000ce4:	2780      	movs	r7, #128	; 0x80
 8000ce6:	027f      	lsls	r7, r7, #9
 8000ce8:	46b9      	mov	r9, r7
 8000cea:	444b      	add	r3, r9
 8000cec:	9302      	str	r3, [sp, #8]
 8000cee:	4653      	mov	r3, sl
 8000cf0:	0c1b      	lsrs	r3, r3, #16
 8000cf2:	469b      	mov	fp, r3
 8000cf4:	4653      	mov	r3, sl
 8000cf6:	041f      	lsls	r7, r3, #16
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	041b      	lsls	r3, r3, #16
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	4698      	mov	r8, r3
 8000d00:	003b      	movs	r3, r7
 8000d02:	4443      	add	r3, r8
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	0c33      	lsrs	r3, r6, #16
 8000d08:	0436      	lsls	r6, r6, #16
 8000d0a:	0c36      	lsrs	r6, r6, #16
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	0033      	movs	r3, r6
 8000d10:	4343      	muls	r3, r0
 8000d12:	4699      	mov	r9, r3
 8000d14:	4643      	mov	r3, r8
 8000d16:	4343      	muls	r3, r0
 8000d18:	002f      	movs	r7, r5
 8000d1a:	469a      	mov	sl, r3
 8000d1c:	4643      	mov	r3, r8
 8000d1e:	4377      	muls	r7, r6
 8000d20:	435d      	muls	r5, r3
 8000d22:	0c38      	lsrs	r0, r7, #16
 8000d24:	444d      	add	r5, r9
 8000d26:	1945      	adds	r5, r0, r5
 8000d28:	45a9      	cmp	r9, r5
 8000d2a:	d903      	bls.n	8000d34 <__aeabi_dmul+0x168>
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	025b      	lsls	r3, r3, #9
 8000d30:	4699      	mov	r9, r3
 8000d32:	44ca      	add	sl, r9
 8000d34:	043f      	lsls	r7, r7, #16
 8000d36:	0c28      	lsrs	r0, r5, #16
 8000d38:	0c3f      	lsrs	r7, r7, #16
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	19ed      	adds	r5, r5, r7
 8000d3e:	0c27      	lsrs	r7, r4, #16
 8000d40:	0424      	lsls	r4, r4, #16
 8000d42:	0c24      	lsrs	r4, r4, #16
 8000d44:	0003      	movs	r3, r0
 8000d46:	0020      	movs	r0, r4
 8000d48:	4350      	muls	r0, r2
 8000d4a:	437a      	muls	r2, r7
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	003a      	movs	r2, r7
 8000d50:	4453      	add	r3, sl
 8000d52:	9305      	str	r3, [sp, #20]
 8000d54:	0c03      	lsrs	r3, r0, #16
 8000d56:	469a      	mov	sl, r3
 8000d58:	434a      	muls	r2, r1
 8000d5a:	4361      	muls	r1, r4
 8000d5c:	4449      	add	r1, r9
 8000d5e:	4451      	add	r1, sl
 8000d60:	44ab      	add	fp, r5
 8000d62:	4589      	cmp	r9, r1
 8000d64:	d903      	bls.n	8000d6e <__aeabi_dmul+0x1a2>
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	444a      	add	r2, r9
 8000d6e:	0400      	lsls	r0, r0, #16
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	0c00      	lsrs	r0, r0, #16
 8000d74:	0409      	lsls	r1, r1, #16
 8000d76:	1809      	adds	r1, r1, r0
 8000d78:	0020      	movs	r0, r4
 8000d7a:	4699      	mov	r9, r3
 8000d7c:	4643      	mov	r3, r8
 8000d7e:	4370      	muls	r0, r6
 8000d80:	435c      	muls	r4, r3
 8000d82:	437e      	muls	r6, r7
 8000d84:	435f      	muls	r7, r3
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	4698      	mov	r8, r3
 8000d8a:	19a4      	adds	r4, r4, r6
 8000d8c:	4444      	add	r4, r8
 8000d8e:	444a      	add	r2, r9
 8000d90:	9703      	str	r7, [sp, #12]
 8000d92:	42a6      	cmp	r6, r4
 8000d94:	d904      	bls.n	8000da0 <__aeabi_dmul+0x1d4>
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	025b      	lsls	r3, r3, #9
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	4447      	add	r7, r8
 8000d9e:	9703      	str	r7, [sp, #12]
 8000da0:	0423      	lsls	r3, r4, #16
 8000da2:	9e02      	ldr	r6, [sp, #8]
 8000da4:	469a      	mov	sl, r3
 8000da6:	9b05      	ldr	r3, [sp, #20]
 8000da8:	445e      	add	r6, fp
 8000daa:	4698      	mov	r8, r3
 8000dac:	42ae      	cmp	r6, r5
 8000dae:	41ad      	sbcs	r5, r5
 8000db0:	1876      	adds	r6, r6, r1
 8000db2:	428e      	cmp	r6, r1
 8000db4:	4189      	sbcs	r1, r1
 8000db6:	0400      	lsls	r0, r0, #16
 8000db8:	0c00      	lsrs	r0, r0, #16
 8000dba:	4450      	add	r0, sl
 8000dbc:	4440      	add	r0, r8
 8000dbe:	426d      	negs	r5, r5
 8000dc0:	1947      	adds	r7, r0, r5
 8000dc2:	46b8      	mov	r8, r7
 8000dc4:	4693      	mov	fp, r2
 8000dc6:	4249      	negs	r1, r1
 8000dc8:	4689      	mov	r9, r1
 8000dca:	44c3      	add	fp, r8
 8000dcc:	44d9      	add	r9, fp
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	4180      	sbcs	r0, r0
 8000dd2:	45a8      	cmp	r8, r5
 8000dd4:	41ad      	sbcs	r5, r5
 8000dd6:	4593      	cmp	fp, r2
 8000dd8:	4192      	sbcs	r2, r2
 8000dda:	4589      	cmp	r9, r1
 8000ddc:	4189      	sbcs	r1, r1
 8000dde:	426d      	negs	r5, r5
 8000de0:	4240      	negs	r0, r0
 8000de2:	4328      	orrs	r0, r5
 8000de4:	0c24      	lsrs	r4, r4, #16
 8000de6:	4252      	negs	r2, r2
 8000de8:	4249      	negs	r1, r1
 8000dea:	430a      	orrs	r2, r1
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	1900      	adds	r0, r0, r4
 8000df0:	1880      	adds	r0, r0, r2
 8000df2:	18c7      	adds	r7, r0, r3
 8000df4:	464b      	mov	r3, r9
 8000df6:	0ddc      	lsrs	r4, r3, #23
 8000df8:	9b04      	ldr	r3, [sp, #16]
 8000dfa:	0275      	lsls	r5, r6, #9
 8000dfc:	431d      	orrs	r5, r3
 8000dfe:	1e6a      	subs	r2, r5, #1
 8000e00:	4195      	sbcs	r5, r2
 8000e02:	464b      	mov	r3, r9
 8000e04:	0df6      	lsrs	r6, r6, #23
 8000e06:	027f      	lsls	r7, r7, #9
 8000e08:	4335      	orrs	r5, r6
 8000e0a:	025a      	lsls	r2, r3, #9
 8000e0c:	433c      	orrs	r4, r7
 8000e0e:	4315      	orrs	r5, r2
 8000e10:	01fb      	lsls	r3, r7, #7
 8000e12:	d400      	bmi.n	8000e16 <__aeabi_dmul+0x24a>
 8000e14:	e11c      	b.n	8001050 <__aeabi_dmul+0x484>
 8000e16:	2101      	movs	r1, #1
 8000e18:	086a      	lsrs	r2, r5, #1
 8000e1a:	400d      	ands	r5, r1
 8000e1c:	4315      	orrs	r5, r2
 8000e1e:	07e2      	lsls	r2, r4, #31
 8000e20:	4315      	orrs	r5, r2
 8000e22:	0864      	lsrs	r4, r4, #1
 8000e24:	494f      	ldr	r1, [pc, #316]	; (8000f64 <__aeabi_dmul+0x398>)
 8000e26:	4461      	add	r1, ip
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_dmul+0x262>
 8000e2c:	e0b0      	b.n	8000f90 <__aeabi_dmul+0x3c4>
 8000e2e:	076b      	lsls	r3, r5, #29
 8000e30:	d009      	beq.n	8000e46 <__aeabi_dmul+0x27a>
 8000e32:	220f      	movs	r2, #15
 8000e34:	402a      	ands	r2, r5
 8000e36:	2a04      	cmp	r2, #4
 8000e38:	d005      	beq.n	8000e46 <__aeabi_dmul+0x27a>
 8000e3a:	1d2a      	adds	r2, r5, #4
 8000e3c:	42aa      	cmp	r2, r5
 8000e3e:	41ad      	sbcs	r5, r5
 8000e40:	426d      	negs	r5, r5
 8000e42:	1964      	adds	r4, r4, r5
 8000e44:	0015      	movs	r5, r2
 8000e46:	01e3      	lsls	r3, r4, #7
 8000e48:	d504      	bpl.n	8000e54 <__aeabi_dmul+0x288>
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <__aeabi_dmul+0x39c>)
 8000e4e:	00c9      	lsls	r1, r1, #3
 8000e50:	4014      	ands	r4, r2
 8000e52:	4461      	add	r1, ip
 8000e54:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <__aeabi_dmul+0x3a0>)
 8000e56:	4291      	cmp	r1, r2
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_dmul+0x290>
 8000e5a:	e726      	b.n	8000caa <__aeabi_dmul+0xde>
 8000e5c:	0762      	lsls	r2, r4, #29
 8000e5e:	08ed      	lsrs	r5, r5, #3
 8000e60:	0264      	lsls	r4, r4, #9
 8000e62:	0549      	lsls	r1, r1, #21
 8000e64:	4315      	orrs	r5, r2
 8000e66:	0b24      	lsrs	r4, r4, #12
 8000e68:	0d4a      	lsrs	r2, r1, #21
 8000e6a:	e710      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	4332      	orrs	r2, r6
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dmul+0x2a8>
 8000e72:	e07f      	b.n	8000f74 <__aeabi_dmul+0x3a8>
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dmul+0x2ae>
 8000e78:	e0dc      	b.n	8001034 <__aeabi_dmul+0x468>
 8000e7a:	0030      	movs	r0, r6
 8000e7c:	f000 f990 	bl	80011a0 <__clzsi2>
 8000e80:	0002      	movs	r2, r0
 8000e82:	3a0b      	subs	r2, #11
 8000e84:	231d      	movs	r3, #29
 8000e86:	0001      	movs	r1, r0
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	4652      	mov	r2, sl
 8000e8c:	3908      	subs	r1, #8
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	408e      	lsls	r6, r1
 8000e92:	4316      	orrs	r6, r2
 8000e94:	4652      	mov	r2, sl
 8000e96:	408a      	lsls	r2, r1
 8000e98:	9b00      	ldr	r3, [sp, #0]
 8000e9a:	4935      	ldr	r1, [pc, #212]	; (8000f70 <__aeabi_dmul+0x3a4>)
 8000e9c:	1a18      	subs	r0, r3, r0
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	4463      	add	r3, ip
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	e6d3      	b.n	8000c52 <__aeabi_dmul+0x86>
 8000eaa:	0025      	movs	r5, r4
 8000eac:	4305      	orrs	r5, r0
 8000eae:	d04a      	beq.n	8000f46 <__aeabi_dmul+0x37a>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dmul+0x2ea>
 8000eb4:	e0b0      	b.n	8001018 <__aeabi_dmul+0x44c>
 8000eb6:	0020      	movs	r0, r4
 8000eb8:	f000 f972 	bl	80011a0 <__clzsi2>
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	390b      	subs	r1, #11
 8000ec2:	231d      	movs	r3, #29
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	1a5b      	subs	r3, r3, r1
 8000ec8:	0031      	movs	r1, r6
 8000eca:	0035      	movs	r5, r6
 8000ecc:	3808      	subs	r0, #8
 8000ece:	4084      	lsls	r4, r0
 8000ed0:	40d9      	lsrs	r1, r3
 8000ed2:	4085      	lsls	r5, r0
 8000ed4:	430c      	orrs	r4, r1
 8000ed6:	4826      	ldr	r0, [pc, #152]	; (8000f70 <__aeabi_dmul+0x3a4>)
 8000ed8:	1a83      	subs	r3, r0, r2
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	4699      	mov	r9, r3
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	e697      	b.n	8000c14 <__aeabi_dmul+0x48>
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	4325      	orrs	r5, r4
 8000ee8:	d126      	bne.n	8000f38 <__aeabi_dmul+0x36c>
 8000eea:	2208      	movs	r2, #8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	4691      	mov	r9, r2
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	e68d      	b.n	8000c14 <__aeabi_dmul+0x48>
 8000ef8:	4652      	mov	r2, sl
 8000efa:	9b00      	ldr	r3, [sp, #0]
 8000efc:	4332      	orrs	r2, r6
 8000efe:	d110      	bne.n	8000f22 <__aeabi_dmul+0x356>
 8000f00:	4915      	ldr	r1, [pc, #84]	; (8000f58 <__aeabi_dmul+0x38c>)
 8000f02:	2600      	movs	r6, #0
 8000f04:	468c      	mov	ip, r1
 8000f06:	4463      	add	r3, ip
 8000f08:	4649      	mov	r1, r9
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	4319      	orrs	r1, r3
 8000f10:	4689      	mov	r9, r1
 8000f12:	2002      	movs	r0, #2
 8000f14:	e69d      	b.n	8000c52 <__aeabi_dmul+0x86>
 8000f16:	465b      	mov	r3, fp
 8000f18:	9701      	str	r7, [sp, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dmul+0x354>
 8000f1e:	e6ad      	b.n	8000c7c <__aeabi_dmul+0xb0>
 8000f20:	e6c3      	b.n	8000caa <__aeabi_dmul+0xde>
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <__aeabi_dmul+0x38c>)
 8000f24:	2003      	movs	r0, #3
 8000f26:	4694      	mov	ip, r2
 8000f28:	4463      	add	r3, ip
 8000f2a:	464a      	mov	r2, r9
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2303      	movs	r3, #3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	4691      	mov	r9, r2
 8000f34:	4652      	mov	r2, sl
 8000f36:	e68c      	b.n	8000c52 <__aeabi_dmul+0x86>
 8000f38:	220c      	movs	r2, #12
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	0005      	movs	r5, r0
 8000f40:	4691      	mov	r9, r2
 8000f42:	469b      	mov	fp, r3
 8000f44:	e666      	b.n	8000c14 <__aeabi_dmul+0x48>
 8000f46:	2304      	movs	r3, #4
 8000f48:	4699      	mov	r9, r3
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	2400      	movs	r4, #0
 8000f52:	469b      	mov	fp, r3
 8000f54:	e65e      	b.n	8000c14 <__aeabi_dmul+0x48>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	000007ff 	.word	0x000007ff
 8000f5c:	fffffc01 	.word	0xfffffc01
 8000f60:	080040c8 	.word	0x080040c8
 8000f64:	000003ff 	.word	0x000003ff
 8000f68:	feffffff 	.word	0xfeffffff
 8000f6c:	000007fe 	.word	0x000007fe
 8000f70:	fffffc0d 	.word	0xfffffc0d
 8000f74:	4649      	mov	r1, r9
 8000f76:	2301      	movs	r3, #1
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	4689      	mov	r9, r1
 8000f7c:	2600      	movs	r6, #0
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e667      	b.n	8000c52 <__aeabi_dmul+0x86>
 8000f82:	2300      	movs	r3, #0
 8000f84:	2480      	movs	r4, #128	; 0x80
 8000f86:	2500      	movs	r5, #0
 8000f88:	4a43      	ldr	r2, [pc, #268]	; (8001098 <__aeabi_dmul+0x4cc>)
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	e67e      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8000f90:	2001      	movs	r0, #1
 8000f92:	1a40      	subs	r0, r0, r1
 8000f94:	2838      	cmp	r0, #56	; 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dmul+0x3ce>
 8000f98:	e676      	b.n	8000c88 <__aeabi_dmul+0xbc>
 8000f9a:	281f      	cmp	r0, #31
 8000f9c:	dd5b      	ble.n	8001056 <__aeabi_dmul+0x48a>
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	0023      	movs	r3, r4
 8000fa2:	4252      	negs	r2, r2
 8000fa4:	1a51      	subs	r1, r2, r1
 8000fa6:	40cb      	lsrs	r3, r1
 8000fa8:	0019      	movs	r1, r3
 8000faa:	2820      	cmp	r0, #32
 8000fac:	d003      	beq.n	8000fb6 <__aeabi_dmul+0x3ea>
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <__aeabi_dmul+0x4d0>)
 8000fb0:	4462      	add	r2, ip
 8000fb2:	4094      	lsls	r4, r2
 8000fb4:	4325      	orrs	r5, r4
 8000fb6:	1e6a      	subs	r2, r5, #1
 8000fb8:	4195      	sbcs	r5, r2
 8000fba:	002a      	movs	r2, r5
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	2107      	movs	r1, #7
 8000fc0:	000d      	movs	r5, r1
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	4015      	ands	r5, r2
 8000fc6:	4211      	tst	r1, r2
 8000fc8:	d05b      	beq.n	8001082 <__aeabi_dmul+0x4b6>
 8000fca:	210f      	movs	r1, #15
 8000fcc:	2400      	movs	r4, #0
 8000fce:	4011      	ands	r1, r2
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	d053      	beq.n	800107c <__aeabi_dmul+0x4b0>
 8000fd4:	1d11      	adds	r1, r2, #4
 8000fd6:	4291      	cmp	r1, r2
 8000fd8:	4192      	sbcs	r2, r2
 8000fda:	4252      	negs	r2, r2
 8000fdc:	18a4      	adds	r4, r4, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	0223      	lsls	r3, r4, #8
 8000fe2:	d54b      	bpl.n	800107c <__aeabi_dmul+0x4b0>
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	2500      	movs	r5, #0
 8000fea:	e650      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	031b      	lsls	r3, r3, #12
 8000ff0:	421c      	tst	r4, r3
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dmul+0x43c>
 8000ff4:	421e      	tst	r6, r3
 8000ff6:	d107      	bne.n	8001008 <__aeabi_dmul+0x43c>
 8000ff8:	4333      	orrs	r3, r6
 8000ffa:	031c      	lsls	r4, r3, #12
 8000ffc:	4643      	mov	r3, r8
 8000ffe:	0015      	movs	r5, r2
 8001000:	0b24      	lsrs	r4, r4, #12
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <__aeabi_dmul+0x4cc>)
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	e642      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0312      	lsls	r2, r2, #12
 800100c:	4314      	orrs	r4, r2
 800100e:	0324      	lsls	r4, r4, #12
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <__aeabi_dmul+0x4cc>)
 8001012:	0b24      	lsrs	r4, r4, #12
 8001014:	9701      	str	r7, [sp, #4]
 8001016:	e63a      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8001018:	f000 f8c2 	bl	80011a0 <__clzsi2>
 800101c:	0001      	movs	r1, r0
 800101e:	0002      	movs	r2, r0
 8001020:	3115      	adds	r1, #21
 8001022:	3220      	adds	r2, #32
 8001024:	291c      	cmp	r1, #28
 8001026:	dc00      	bgt.n	800102a <__aeabi_dmul+0x45e>
 8001028:	e74b      	b.n	8000ec2 <__aeabi_dmul+0x2f6>
 800102a:	0034      	movs	r4, r6
 800102c:	3808      	subs	r0, #8
 800102e:	2500      	movs	r5, #0
 8001030:	4084      	lsls	r4, r0
 8001032:	e750      	b.n	8000ed6 <__aeabi_dmul+0x30a>
 8001034:	f000 f8b4 	bl	80011a0 <__clzsi2>
 8001038:	0003      	movs	r3, r0
 800103a:	001a      	movs	r2, r3
 800103c:	3215      	adds	r2, #21
 800103e:	3020      	adds	r0, #32
 8001040:	2a1c      	cmp	r2, #28
 8001042:	dc00      	bgt.n	8001046 <__aeabi_dmul+0x47a>
 8001044:	e71e      	b.n	8000e84 <__aeabi_dmul+0x2b8>
 8001046:	4656      	mov	r6, sl
 8001048:	3b08      	subs	r3, #8
 800104a:	2200      	movs	r2, #0
 800104c:	409e      	lsls	r6, r3
 800104e:	e723      	b.n	8000e98 <__aeabi_dmul+0x2cc>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	469c      	mov	ip, r3
 8001054:	e6e6      	b.n	8000e24 <__aeabi_dmul+0x258>
 8001056:	4912      	ldr	r1, [pc, #72]	; (80010a0 <__aeabi_dmul+0x4d4>)
 8001058:	0022      	movs	r2, r4
 800105a:	4461      	add	r1, ip
 800105c:	002e      	movs	r6, r5
 800105e:	408d      	lsls	r5, r1
 8001060:	408a      	lsls	r2, r1
 8001062:	40c6      	lsrs	r6, r0
 8001064:	1e69      	subs	r1, r5, #1
 8001066:	418d      	sbcs	r5, r1
 8001068:	4332      	orrs	r2, r6
 800106a:	432a      	orrs	r2, r5
 800106c:	40c4      	lsrs	r4, r0
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d0b6      	beq.n	8000fe0 <__aeabi_dmul+0x414>
 8001072:	210f      	movs	r1, #15
 8001074:	4011      	ands	r1, r2
 8001076:	2904      	cmp	r1, #4
 8001078:	d1ac      	bne.n	8000fd4 <__aeabi_dmul+0x408>
 800107a:	e7b1      	b.n	8000fe0 <__aeabi_dmul+0x414>
 800107c:	0765      	lsls	r5, r4, #29
 800107e:	0264      	lsls	r4, r4, #9
 8001080:	0b24      	lsrs	r4, r4, #12
 8001082:	08d2      	lsrs	r2, r2, #3
 8001084:	4315      	orrs	r5, r2
 8001086:	2200      	movs	r2, #0
 8001088:	e601      	b.n	8000c8e <__aeabi_dmul+0xc2>
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	0312      	lsls	r2, r2, #12
 800108e:	4314      	orrs	r4, r2
 8001090:	0324      	lsls	r4, r4, #12
 8001092:	4a01      	ldr	r2, [pc, #4]	; (8001098 <__aeabi_dmul+0x4cc>)
 8001094:	0b24      	lsrs	r4, r4, #12
 8001096:	e5fa      	b.n	8000c8e <__aeabi_dmul+0xc2>
 8001098:	000007ff 	.word	0x000007ff
 800109c:	0000043e 	.word	0x0000043e
 80010a0:	0000041e 	.word	0x0000041e

080010a4 <__aeabi_d2iz>:
 80010a4:	000a      	movs	r2, r1
 80010a6:	b530      	push	{r4, r5, lr}
 80010a8:	4c13      	ldr	r4, [pc, #76]	; (80010f8 <__aeabi_d2iz+0x54>)
 80010aa:	0053      	lsls	r3, r2, #1
 80010ac:	0309      	lsls	r1, r1, #12
 80010ae:	0005      	movs	r5, r0
 80010b0:	0b09      	lsrs	r1, r1, #12
 80010b2:	2000      	movs	r0, #0
 80010b4:	0d5b      	lsrs	r3, r3, #21
 80010b6:	0fd2      	lsrs	r2, r2, #31
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	dd04      	ble.n	80010c6 <__aeabi_d2iz+0x22>
 80010bc:	480f      	ldr	r0, [pc, #60]	; (80010fc <__aeabi_d2iz+0x58>)
 80010be:	4283      	cmp	r3, r0
 80010c0:	dd02      	ble.n	80010c8 <__aeabi_d2iz+0x24>
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <__aeabi_d2iz+0x5c>)
 80010c4:	18d0      	adds	r0, r2, r3
 80010c6:	bd30      	pop	{r4, r5, pc}
 80010c8:	2080      	movs	r0, #128	; 0x80
 80010ca:	0340      	lsls	r0, r0, #13
 80010cc:	4301      	orrs	r1, r0
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <__aeabi_d2iz+0x60>)
 80010d0:	1ac0      	subs	r0, r0, r3
 80010d2:	281f      	cmp	r0, #31
 80010d4:	dd08      	ble.n	80010e8 <__aeabi_d2iz+0x44>
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <__aeabi_d2iz+0x64>)
 80010d8:	1ac3      	subs	r3, r0, r3
 80010da:	40d9      	lsrs	r1, r3
 80010dc:	000b      	movs	r3, r1
 80010de:	4258      	negs	r0, r3
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d1f0      	bne.n	80010c6 <__aeabi_d2iz+0x22>
 80010e4:	0018      	movs	r0, r3
 80010e6:	e7ee      	b.n	80010c6 <__aeabi_d2iz+0x22>
 80010e8:	4c08      	ldr	r4, [pc, #32]	; (800110c <__aeabi_d2iz+0x68>)
 80010ea:	40c5      	lsrs	r5, r0
 80010ec:	46a4      	mov	ip, r4
 80010ee:	4463      	add	r3, ip
 80010f0:	4099      	lsls	r1, r3
 80010f2:	000b      	movs	r3, r1
 80010f4:	432b      	orrs	r3, r5
 80010f6:	e7f2      	b.n	80010de <__aeabi_d2iz+0x3a>
 80010f8:	000003fe 	.word	0x000003fe
 80010fc:	0000041d 	.word	0x0000041d
 8001100:	7fffffff 	.word	0x7fffffff
 8001104:	00000433 	.word	0x00000433
 8001108:	00000413 	.word	0x00000413
 800110c:	fffffbed 	.word	0xfffffbed

08001110 <__aeabi_f2d>:
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	0043      	lsls	r3, r0, #1
 8001114:	0246      	lsls	r6, r0, #9
 8001116:	0fc4      	lsrs	r4, r0, #31
 8001118:	20fe      	movs	r0, #254	; 0xfe
 800111a:	0e1b      	lsrs	r3, r3, #24
 800111c:	1c59      	adds	r1, r3, #1
 800111e:	0a75      	lsrs	r5, r6, #9
 8001120:	4208      	tst	r0, r1
 8001122:	d00c      	beq.n	800113e <__aeabi_f2d+0x2e>
 8001124:	22e0      	movs	r2, #224	; 0xe0
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4694      	mov	ip, r2
 800112a:	076d      	lsls	r5, r5, #29
 800112c:	0b36      	lsrs	r6, r6, #12
 800112e:	4463      	add	r3, ip
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	4333      	orrs	r3, r6
 8001134:	07e4      	lsls	r4, r4, #31
 8001136:	4323      	orrs	r3, r4
 8001138:	0028      	movs	r0, r5
 800113a:	0019      	movs	r1, r3
 800113c:	bd70      	pop	{r4, r5, r6, pc}
 800113e:	2b00      	cmp	r3, #0
 8001140:	d114      	bne.n	800116c <__aeabi_f2d+0x5c>
 8001142:	2d00      	cmp	r5, #0
 8001144:	d01b      	beq.n	800117e <__aeabi_f2d+0x6e>
 8001146:	0028      	movs	r0, r5
 8001148:	f000 f82a 	bl	80011a0 <__clzsi2>
 800114c:	280a      	cmp	r0, #10
 800114e:	dc1c      	bgt.n	800118a <__aeabi_f2d+0x7a>
 8001150:	230b      	movs	r3, #11
 8001152:	002e      	movs	r6, r5
 8001154:	1a1b      	subs	r3, r3, r0
 8001156:	40de      	lsrs	r6, r3
 8001158:	0003      	movs	r3, r0
 800115a:	3315      	adds	r3, #21
 800115c:	409d      	lsls	r5, r3
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <__aeabi_f2d+0x88>)
 8001160:	0336      	lsls	r6, r6, #12
 8001162:	1a12      	subs	r2, r2, r0
 8001164:	0552      	lsls	r2, r2, #21
 8001166:	0b36      	lsrs	r6, r6, #12
 8001168:	0d53      	lsrs	r3, r2, #21
 800116a:	e7e1      	b.n	8001130 <__aeabi_f2d+0x20>
 800116c:	2d00      	cmp	r5, #0
 800116e:	d009      	beq.n	8001184 <__aeabi_f2d+0x74>
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0b36      	lsrs	r6, r6, #12
 8001174:	0312      	lsls	r2, r2, #12
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <__aeabi_f2d+0x8c>)
 8001178:	076d      	lsls	r5, r5, #29
 800117a:	4316      	orrs	r6, r2
 800117c:	e7d8      	b.n	8001130 <__aeabi_f2d+0x20>
 800117e:	2300      	movs	r3, #0
 8001180:	2600      	movs	r6, #0
 8001182:	e7d5      	b.n	8001130 <__aeabi_f2d+0x20>
 8001184:	2600      	movs	r6, #0
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <__aeabi_f2d+0x8c>)
 8001188:	e7d2      	b.n	8001130 <__aeabi_f2d+0x20>
 800118a:	0003      	movs	r3, r0
 800118c:	3b0b      	subs	r3, #11
 800118e:	409d      	lsls	r5, r3
 8001190:	002e      	movs	r6, r5
 8001192:	2500      	movs	r5, #0
 8001194:	e7e3      	b.n	800115e <__aeabi_f2d+0x4e>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	00000389 	.word	0x00000389
 800119c:	000007ff 	.word	0x000007ff

080011a0 <__clzsi2>:
 80011a0:	211c      	movs	r1, #28
 80011a2:	2301      	movs	r3, #1
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	4298      	cmp	r0, r3
 80011a8:	d301      	bcc.n	80011ae <__clzsi2+0xe>
 80011aa:	0c00      	lsrs	r0, r0, #16
 80011ac:	3910      	subs	r1, #16
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	4298      	cmp	r0, r3
 80011b2:	d301      	bcc.n	80011b8 <__clzsi2+0x18>
 80011b4:	0a00      	lsrs	r0, r0, #8
 80011b6:	3908      	subs	r1, #8
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	4298      	cmp	r0, r3
 80011bc:	d301      	bcc.n	80011c2 <__clzsi2+0x22>
 80011be:	0900      	lsrs	r0, r0, #4
 80011c0:	3904      	subs	r1, #4
 80011c2:	a202      	add	r2, pc, #8	; (adr r2, 80011cc <__clzsi2+0x2c>)
 80011c4:	5c10      	ldrb	r0, [r2, r0]
 80011c6:	1840      	adds	r0, r0, r1
 80011c8:	4770      	bx	lr
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	02020304 	.word	0x02020304
 80011d0:	01010101 	.word	0x01010101
	...

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f000 fe85 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f939 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f000 fa2f 	bl	800164c <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ee:	f000 f997 	bl	8001520 <MX_I2C1_Init>
  MX_TIM15_Init();
 80011f2:	f000 f9d5 	bl	80015a0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 80011f6:	f000 fabb 	bl	8001770 <SSD1306_Init>
  SSD1306_GotoXY (10, 30);
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
  SSD1306_UpdateScreen();
  */

  uint32_t numTicks = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int distance = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28

  char buffer [33];
  uint8_t x = 0;
 8001202:	2327      	movs	r3, #39	; 0x27
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]

  uint8_t button_1_state = 0;
 800120a:	2326      	movs	r3, #38	; 0x26
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  uint8_t button_2_state = 0;
 8001212:	2325      	movs	r3, #37	; 0x25
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
  uint8_t button_3_state = 0;
 800121a:	2324      	movs	r3, #36	; 0x24
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
  uint8_t button_4_state = 0;
 8001222:	2323      	movs	r3, #35	; 0x23
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	0059      	lsls	r1, r3, #1
 800122e:	2390      	movs	r3, #144	; 0x90
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2200      	movs	r2, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f001 f908 	bl	800244a <HAL_GPIO_WritePin>
	  		usDelay(3);
 800123a:	2003      	movs	r0, #3
 800123c:	f000 f8de 	bl	80013fc <usDelay>

	  		//*** START Ultrasonic measure routine ***//
	  		//1. Output 10 usec TRIG
	  		HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	0059      	lsls	r1, r3, #1
 8001244:	2390      	movs	r3, #144	; 0x90
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	2201      	movs	r2, #1
 800124a:	0018      	movs	r0, r3
 800124c:	f001 f8fd 	bl	800244a <HAL_GPIO_WritePin>
	  		usDelay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f000 f8d3 	bl	80013fc <usDelay>
	  		HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	0059      	lsls	r1, r3, #1
 800125a:	2390      	movs	r3, #144	; 0x90
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2200      	movs	r2, #0
 8001260:	0018      	movs	r0, r3
 8001262:	f001 f8f2 	bl	800244a <HAL_GPIO_WritePin>

	  		//2. Wait for ECHO pin rising edge
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET);
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	009a      	lsls	r2, r3, #2
 800126c:	2390      	movs	r3, #144	; 0x90
 800126e:	05db      	lsls	r3, r3, #23
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f001 f8cc 	bl	8002410 <HAL_GPIO_ReadPin>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d0f5      	beq.n	8001268 <main+0x8c>


	  		numTicks = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8001280:	e005      	b.n	800128e <main+0xb2>
	  		{
	  			numTicks++;
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	3301      	adds	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
	  			usDelay(2); // przez ograniczenia sprzetowe 2 mikro sekundy trwaja okolo 2.8 mikro sekundy
 8001288:	2002      	movs	r0, #2
 800128a:	f000 f8b7 	bl	80013fc <usDelay>
	  		while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	009a      	lsls	r2, r3, #2
 8001292:	2390      	movs	r3, #144	; 0x90
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	0011      	movs	r1, r2
 8001298:	0018      	movs	r0, r3
 800129a:	f001 f8b9 	bl	8002410 <HAL_GPIO_ReadPin>
 800129e:	0003      	movs	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d0ee      	beq.n	8001282 <main+0xa6>
	  		};


	  		distance = (numTicks + 0.0f) * 2.8 * 0.0343 / 2;
 80012a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012a6:	f7ff f959 	bl	800055c <__aeabi_ui2f>
 80012aa:	1c03      	adds	r3, r0, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	1c18      	adds	r0, r3, #0
 80012b0:	f7fe ffb6 	bl	8000220 <__aeabi_fadd>
 80012b4:	1c03      	adds	r3, r0, #0
 80012b6:	1c18      	adds	r0, r3, #0
 80012b8:	f7ff ff2a 	bl	8001110 <__aeabi_f2d>
 80012bc:	4a47      	ldr	r2, [pc, #284]	; (80013dc <main+0x200>)
 80012be:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <main+0x204>)
 80012c0:	f7ff fc84 	bl	8000bcc <__aeabi_dmul>
 80012c4:	0002      	movs	r2, r0
 80012c6:	000b      	movs	r3, r1
 80012c8:	0010      	movs	r0, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <main+0x208>)
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <main+0x20c>)
 80012d0:	f7ff fc7c 	bl	8000bcc <__aeabi_dmul>
 80012d4:	0002      	movs	r2, r0
 80012d6:	000b      	movs	r3, r1
 80012d8:	0010      	movs	r0, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	f7ff f97d 	bl	80005e0 <__aeabi_ddiv>
 80012e6:	0002      	movs	r2, r0
 80012e8:	000b      	movs	r3, r1
 80012ea:	0010      	movs	r0, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	f7ff fed9 	bl	80010a4 <__aeabi_d2iz>
 80012f2:	0003      	movs	r3, r0
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28


	  //x++;
	  itoa (distance, buffer, 10); //funkcja zmienia int na string zeby pokazac na ekranie
 80012f6:	0039      	movs	r1, r7
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	220a      	movs	r2, #10
 80012fc:	0018      	movs	r0, r3
 80012fe:	f002 fe53 	bl	8003fa8 <itoa>

	  SSD1306_GotoXY (10,10);
 8001302:	210a      	movs	r1, #10
 8001304:	200a      	movs	r0, #10
 8001306:	f000 fbb3 	bl	8001a70 <SSD1306_GotoXY>
	  SSD1306_Puts ("Wysokosc:", &Font_11x18, 1);
 800130a:	4938      	ldr	r1, [pc, #224]	; (80013ec <main+0x210>)
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <main+0x214>)
 800130e:	2201      	movs	r2, #1
 8001310:	0018      	movs	r0, r3
 8001312:	f000 fc47 	bl	8001ba4 <SSD1306_Puts>
	  SSD1306_GotoXY (10, 30);
 8001316:	211e      	movs	r1, #30
 8001318:	200a      	movs	r0, #10
 800131a:	f000 fba9 	bl	8001a70 <SSD1306_GotoXY>
	  SSD1306_Puts (buffer, &Font_11x18, 1);
 800131e:	4933      	ldr	r1, [pc, #204]	; (80013ec <main+0x210>)
 8001320:	003b      	movs	r3, r7
 8001322:	2201      	movs	r2, #1
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fc3d 	bl	8001ba4 <SSD1306_Puts>
	  SSD1306_GotoXY (70, 30);
 800132a:	211e      	movs	r1, #30
 800132c:	2046      	movs	r0, #70	; 0x46
 800132e:	f000 fb9f 	bl	8001a70 <SSD1306_GotoXY>
	  SSD1306_Puts ("cm", &Font_11x18, 1);
 8001332:	492e      	ldr	r1, [pc, #184]	; (80013ec <main+0x210>)
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <main+0x218>)
 8001336:	2201      	movs	r2, #1
 8001338:	0018      	movs	r0, r3
 800133a:	f000 fc33 	bl	8001ba4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 800133e:	f000 fadb 	bl	80018f8 <SSD1306_UpdateScreen>
	  //HAL_Delay(2000);

	  button_1_state = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8001342:	2526      	movs	r5, #38	; 0x26
 8001344:	197c      	adds	r4, r7, r5
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4a2b      	ldr	r2, [pc, #172]	; (80013f8 <main+0x21c>)
 800134c:	0019      	movs	r1, r3
 800134e:	0010      	movs	r0, r2
 8001350:	f001 f85e 	bl	8002410 <HAL_GPIO_ReadPin>
 8001354:	0003      	movs	r3, r0
 8001356:	7023      	strb	r3, [r4, #0]
	  button_2_state = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8001358:	2325      	movs	r3, #37	; 0x25
 800135a:	18fc      	adds	r4, r7, r3
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <main+0x21c>)
 8001362:	0019      	movs	r1, r3
 8001364:	0010      	movs	r0, r2
 8001366:	f001 f853 	bl	8002410 <HAL_GPIO_ReadPin>
 800136a:	0003      	movs	r3, r0
 800136c:	7023      	strb	r3, [r4, #0]
	  button_3_state = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 800136e:	2324      	movs	r3, #36	; 0x24
 8001370:	18fc      	adds	r4, r7, r3
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <main+0x21c>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f84a 	bl	8002410 <HAL_GPIO_ReadPin>
 800137c:	0003      	movs	r3, r0
 800137e:	7023      	strb	r3, [r4, #0]
	  button_4_state = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 8001380:	2323      	movs	r3, #35	; 0x23
 8001382:	18fc      	adds	r4, r7, r3
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <main+0x21c>)
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	0018      	movs	r0, r3
 800138a:	f001 f841 	bl	8002410 <HAL_GPIO_ReadPin>
 800138e:	0003      	movs	r3, r0
 8001390:	7023      	strb	r3, [r4, #0]

	  if((button_1_state == 0) && (distance > 20)){
 8001392:	197b      	adds	r3, r7, r5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <main+0x1e2>
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	2b14      	cmp	r3, #20
 800139e:	dd0e      	ble.n	80013be <main+0x1e2>

		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET);
 80013a0:	2390      	movs	r3, #144	; 0x90
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	2201      	movs	r2, #1
 80013a6:	2110      	movs	r1, #16
 80013a8:	0018      	movs	r0, r3
 80013aa:	f001 f84e 	bl	800244a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, SET);
 80013ae:	2390      	movs	r3, #144	; 0x90
 80013b0:	05db      	lsls	r3, r3, #23
 80013b2:	2201      	movs	r2, #1
 80013b4:	2120      	movs	r1, #32
 80013b6:	0018      	movs	r0, r3
 80013b8:	f001 f847 	bl	800244a <HAL_GPIO_WritePin>
 80013bc:	e00d      	b.n	80013da <main+0x1fe>

	  }else{

		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET);
 80013be:	2390      	movs	r3, #144	; 0x90
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 f83f 	bl	800244a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RESET);
 80013cc:	2390      	movs	r3, #144	; 0x90
 80013ce:	05db      	lsls	r3, r3, #23
 80013d0:	2200      	movs	r2, #0
 80013d2:	2120      	movs	r1, #32
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 f838 	bl	800244a <HAL_GPIO_WritePin>
  while (1){
 80013da:	e726      	b.n	800122a <main+0x4e>
 80013dc:	66666666 	.word	0x66666666
 80013e0:	40066666 	.word	0x40066666
 80013e4:	04816f00 	.word	0x04816f00
 80013e8:	3fa18fc5 	.word	0x3fa18fc5
 80013ec:	20000000 	.word	0x20000000
 80013f0:	08004058 	.word	0x08004058
 80013f4:	08004064 	.word	0x08004064
 80013f8:	48000800 	.word	0x48000800

080013fc <usDelay>:
  //}
  /* USER CODE END 3 */
}

void usDelay(uint32_t uSec)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d801      	bhi.n	800140e <usDelay+0x12>
 800140a:	2302      	movs	r3, #2
 800140c:	607b      	str	r3, [r7, #4]
	TIM15->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <usDelay+0x5c>)
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	3a01      	subs	r2, #1
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM15->EGR = 1; 			/*Re-initialises the timer*/
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <usDelay+0x5c>)
 8001418:	2201      	movs	r2, #1
 800141a:	615a      	str	r2, [r3, #20]
	TIM15->SR &= ~1; 		//Resets the flag
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <usDelay+0x5c>)
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <usDelay+0x5c>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	611a      	str	r2, [r3, #16]
	TIM15->CR1 |= 1; 		//Enables the counter
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <usDelay+0x5c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <usDelay+0x5c>)
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
	while((TIM15->SR&0x0001) != 1);
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <usDelay+0x5c>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2201      	movs	r2, #1
 800143c:	4013      	ands	r3, r2
 800143e:	2b01      	cmp	r3, #1
 8001440:	d1f9      	bne.n	8001436 <usDelay+0x3a>
	TIM15->SR &= ~(0x0001);
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <usDelay+0x5c>)
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <usDelay+0x5c>)
 8001448:	2101      	movs	r1, #1
 800144a:	438a      	bics	r2, r1
 800144c:	611a      	str	r2, [r3, #16]
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40014000 	.word	0x40014000

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b099      	sub	sp, #100	; 0x64
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	242c      	movs	r4, #44	; 0x2c
 8001464:	193b      	adds	r3, r7, r4
 8001466:	0018      	movs	r0, r3
 8001468:	2334      	movs	r3, #52	; 0x34
 800146a:	001a      	movs	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f002 fd9f 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001472:	231c      	movs	r3, #28
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	0018      	movs	r0, r3
 8001478:	2310      	movs	r3, #16
 800147a:	001a      	movs	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	f002 fd97 	bl	8003fb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001482:	003b      	movs	r3, r7
 8001484:	0018      	movs	r0, r3
 8001486:	231c      	movs	r3, #28
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	f002 fd90 	bl	8003fb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	0021      	movs	r1, r4
 8001492:	187b      	adds	r3, r7, r1
 8001494:	2202      	movs	r2, #2
 8001496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2201      	movs	r2, #1
 800149c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2210      	movs	r2, #16
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	2202      	movs	r2, #2
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	0212      	lsls	r2, r2, #8
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0352      	lsls	r2, r2, #13
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fcba 	bl	8002e3c <HAL_RCC_OscConfig>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014cc:	f000 f94a 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	211c      	movs	r1, #28
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2202      	movs	r2, #2
 80014dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2101      	movs	r1, #1
 80014ee:	0018      	movs	r0, r3
 80014f0:	f002 f82a 	bl	8003548 <HAL_RCC_ClockConfig>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80014f8:	f000 f934 	bl	8001764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014fc:	003b      	movs	r3, r7
 80014fe:	2220      	movs	r2, #32
 8001500:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001502:	003b      	movs	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001508:	003b      	movs	r3, r7
 800150a:	0018      	movs	r0, r3
 800150c:	f002 f976 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001514:	f000 f926 	bl	8001764 <Error_Handler>
  }
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b019      	add	sp, #100	; 0x64
 800151e:	bd90      	pop	{r4, r7, pc}

08001520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_I2C1_Init+0x74>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <MX_I2C1_Init+0x78>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_I2C1_Init+0x74>)
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <MX_I2C1_Init+0x7c>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_I2C1_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_I2C1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_I2C1_Init+0x74>)
 800155c:	0018      	movs	r0, r3
 800155e:	f000 ff91 	bl	8002484 <HAL_I2C_Init>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d001      	beq.n	800156a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001566:	f000 f8fd 	bl	8001764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_I2C1_Init+0x74>)
 800156c:	2100      	movs	r1, #0
 800156e:	0018      	movs	r0, r3
 8001570:	f001 fbcc 	bl	8002d0c <HAL_I2CEx_ConfigAnalogFilter>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001578:	f000 f8f4 	bl	8001764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <MX_I2C1_Init+0x74>)
 800157e:	2100      	movs	r1, #0
 8001580:	0018      	movs	r0, r3
 8001582:	f001 fc0f 	bl	8002da4 <HAL_I2CEx_ConfigDigitalFilter>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d001      	beq.n	800158e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 f8eb 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000030 	.word	0x20000030
 8001598:	40005400 	.word	0x40005400
 800159c:	0000020b 	.word	0x0000020b

080015a0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	2308      	movs	r3, #8
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	0018      	movs	r0, r3
 80015ac:	2310      	movs	r3, #16
 80015ae:	001a      	movs	r2, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	f002 fcfd 	bl	8003fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	003b      	movs	r3, r7
 80015b8:	0018      	movs	r0, r3
 80015ba:	2308      	movs	r3, #8
 80015bc:	001a      	movs	r2, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	f002 fcf6 	bl	8003fb0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <MX_TIM15_Init+0xa8>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48-1;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015cc:	222f      	movs	r2, #47	; 0x2f
 80015ce:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_TIM15_Init+0xa4>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 fa01 	bl	80039f8 <HAL_TIM_Base_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80015fa:	f000 f8b3 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	2108      	movs	r1, #8
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0152      	lsls	r2, r2, #5
 8001606:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001608:	187a      	adds	r2, r7, r1
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_TIM15_Init+0xa4>)
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fa42 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 f8a4 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	003b      	movs	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	003b      	movs	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001628:	003a      	movs	r2, r7
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_TIM15_Init+0xa4>)
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f002 fc20 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d001      	beq.n	800163c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001638:	f000 f894 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b006      	add	sp, #24
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000007c 	.word	0x2000007c
 8001648:	40014000 	.word	0x40014000

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b08b      	sub	sp, #44	; 0x2c
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	2414      	movs	r4, #20
 8001654:	193b      	adds	r3, r7, r4
 8001656:	0018      	movs	r0, r3
 8001658:	2314      	movs	r3, #20
 800165a:	001a      	movs	r2, r3
 800165c:	2100      	movs	r1, #0
 800165e:	f002 fca7 	bl	8003fb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <MX_GPIO_Init+0x110>)
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <MX_GPIO_Init+0x110>)
 8001668:	2180      	movs	r1, #128	; 0x80
 800166a:	03c9      	lsls	r1, r1, #15
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <MX_GPIO_Init+0x110>)
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	03db      	lsls	r3, r3, #15
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <MX_GPIO_Init+0x110>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <MX_GPIO_Init+0x110>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0289      	lsls	r1, r1, #10
 8001688:	430a      	orrs	r2, r1
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <MX_GPIO_Init+0x110>)
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <MX_GPIO_Init+0x110>)
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <MX_GPIO_Init+0x110>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0309      	lsls	r1, r1, #12
 80016a4:	430a      	orrs	r2, r1
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	4b2c      	ldr	r3, [pc, #176]	; (800175c <MX_GPIO_Init+0x110>)
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	031b      	lsls	r3, r3, #12
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <MX_GPIO_Init+0x110>)
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <MX_GPIO_Init+0x110>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	02c9      	lsls	r1, r1, #11
 80016c0:	430a      	orrs	r2, r1
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <MX_GPIO_Init+0x110>)
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	4013      	ands	r3, r2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY_K1_Pin|RELAY_K2_Pin|RELAY_K3_Pin|RELAY_K4_Pin
 80016d2:	23f8      	movs	r3, #248	; 0xf8
 80016d4:	0059      	lsls	r1, r3, #1
 80016d6:	2390      	movs	r3, #144	; 0x90
 80016d8:	05db      	lsls	r3, r3, #23
 80016da:	2200      	movs	r2, #0
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 feb4 	bl	800244a <HAL_GPIO_WritePin>
                          |TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RELAY_K1_Pin RELAY_K2_Pin RELAY_K3_Pin RELAY_K4_Pin
                           TRIGGER_Pin */
  GPIO_InitStruct.Pin = RELAY_K1_Pin|RELAY_K2_Pin|RELAY_K3_Pin|RELAY_K4_Pin
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	22f8      	movs	r2, #248	; 0xf8
 80016e6:	0052      	lsls	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
                          |TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	2201      	movs	r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	193a      	adds	r2, r7, r4
 80016fe:	2390      	movs	r3, #144	; 0x90
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	0011      	movs	r1, r2
 8001704:	0018      	movs	r0, r3
 8001706:	f000 fd0b 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin;
 800170a:	0021      	movs	r1, r4
 800170c:	187b      	adds	r3, r7, r1
 800170e:	22f0      	movs	r2, #240	; 0xf0
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	000c      	movs	r4, r1
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	193b      	adds	r3, r7, r4
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	193b      	adds	r3, r7, r4
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <MX_GPIO_Init+0x114>)
 8001726:	0019      	movs	r1, r3
 8001728:	0010      	movs	r0, r2
 800172a:	f000 fcf9 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800172e:	0021      	movs	r1, r4
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001744:	187a      	adds	r2, r7, r1
 8001746:	2390      	movs	r3, #144	; 0x90
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fce7 	bl	8002120 <HAL_GPIO_Init>

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b00b      	add	sp, #44	; 0x2c
 8001758:	bd90      	pop	{r4, r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40021000 	.word	0x40021000
 8001760:	48000800 	.word	0x48000800

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001776:	f000 fa3b 	bl	8001bf0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <SSD1306_Init+0x178>)
 800177c:	485b      	ldr	r0, [pc, #364]	; (80018ec <SSD1306_Init+0x17c>)
 800177e:	2201      	movs	r2, #1
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	f001 f81d 	bl	80027c0 <HAL_I2C_IsDeviceReady>
 8001786:	1e03      	subs	r3, r0, #0
 8001788:	d001      	beq.n	800178e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e0a8      	b.n	80018e0 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <SSD1306_Init+0x180>)
 8001790:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001792:	e002      	b.n	800179a <SSD1306_Init+0x2a>
		p--;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f9      	bne.n	8001794 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80017a0:	22ae      	movs	r2, #174	; 0xae
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 faa3 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80017aa:	2220      	movs	r2, #32
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fa9e 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017b4:	2210      	movs	r2, #16
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fa99 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017be:	22b0      	movs	r2, #176	; 0xb0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fa94 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80017c8:	22c8      	movs	r2, #200	; 0xc8
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f000 fa8f 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	; 0x78
 80017d8:	f000 fa8a 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017dc:	2210      	movs	r2, #16
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	; 0x78
 80017e2:	f000 fa85 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fa80 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017f0:	2281      	movs	r2, #129	; 0x81
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	; 0x78
 80017f6:	f000 fa7b 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 fa76 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001804:	22a1      	movs	r2, #161	; 0xa1
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f000 fa71 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800180e:	22a6      	movs	r2, #166	; 0xa6
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 fa6c 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001818:	22a8      	movs	r2, #168	; 0xa8
 800181a:	2100      	movs	r1, #0
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 fa67 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001822:	223f      	movs	r2, #63	; 0x3f
 8001824:	2100      	movs	r1, #0
 8001826:	2078      	movs	r0, #120	; 0x78
 8001828:	f000 fa62 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800182c:	22a4      	movs	r2, #164	; 0xa4
 800182e:	2100      	movs	r1, #0
 8001830:	2078      	movs	r0, #120	; 0x78
 8001832:	f000 fa5d 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001836:	22d3      	movs	r2, #211	; 0xd3
 8001838:	2100      	movs	r1, #0
 800183a:	2078      	movs	r0, #120	; 0x78
 800183c:	f000 fa58 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2078      	movs	r0, #120	; 0x78
 8001846:	f000 fa53 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800184a:	22d5      	movs	r2, #213	; 0xd5
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	; 0x78
 8001850:	f000 fa4e 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001854:	22f0      	movs	r2, #240	; 0xf0
 8001856:	2100      	movs	r1, #0
 8001858:	2078      	movs	r0, #120	; 0x78
 800185a:	f000 fa49 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800185e:	22d9      	movs	r2, #217	; 0xd9
 8001860:	2100      	movs	r1, #0
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f000 fa44 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001868:	2222      	movs	r2, #34	; 0x22
 800186a:	2100      	movs	r1, #0
 800186c:	2078      	movs	r0, #120	; 0x78
 800186e:	f000 fa3f 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001872:	22da      	movs	r2, #218	; 0xda
 8001874:	2100      	movs	r1, #0
 8001876:	2078      	movs	r0, #120	; 0x78
 8001878:	f000 fa3a 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800187c:	2212      	movs	r2, #18
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	; 0x78
 8001882:	f000 fa35 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001886:	22db      	movs	r2, #219	; 0xdb
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	; 0x78
 800188c:	f000 fa30 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001890:	2220      	movs	r2, #32
 8001892:	2100      	movs	r1, #0
 8001894:	2078      	movs	r0, #120	; 0x78
 8001896:	f000 fa2b 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800189a:	228d      	movs	r2, #141	; 0x8d
 800189c:	2100      	movs	r1, #0
 800189e:	2078      	movs	r0, #120	; 0x78
 80018a0:	f000 fa26 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80018a4:	2214      	movs	r2, #20
 80018a6:	2100      	movs	r1, #0
 80018a8:	2078      	movs	r0, #120	; 0x78
 80018aa:	f000 fa21 	bl	8001cf0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80018ae:	22af      	movs	r2, #175	; 0xaf
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f000 fa1c 	bl	8001cf0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80018b8:	222e      	movs	r2, #46	; 0x2e
 80018ba:	2100      	movs	r1, #0
 80018bc:	2078      	movs	r0, #120	; 0x78
 80018be:	f000 fa17 	bl	8001cf0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f84c 	bl	8001960 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80018c8:	f000 f816 	bl	80018f8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <SSD1306_Init+0x184>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <SSD1306_Init+0x184>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SSD1306_Init+0x184>)
 80018da:	2201      	movs	r2, #1
 80018dc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	00004e20 	.word	0x00004e20
 80018ec:	20000030 	.word	0x20000030
 80018f0:	000009c4 	.word	0x000009c4
 80018f4:	200004c4 	.word	0x200004c4

080018f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e021      	b.n	800194a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	3b50      	subs	r3, #80	; 0x50
 800190c:	b2db      	uxtb	r3, r3
 800190e:	001a      	movs	r2, r3
 8001910:	2100      	movs	r1, #0
 8001912:	2078      	movs	r0, #120	; 0x78
 8001914:	f000 f9ec 	bl	8001cf0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2078      	movs	r0, #120	; 0x78
 800191e:	f000 f9e7 	bl	8001cf0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001922:	2210      	movs	r2, #16
 8001924:	2100      	movs	r1, #0
 8001926:	2078      	movs	r0, #120	; 0x78
 8001928:	f000 f9e2 	bl	8001cf0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	01da      	lsls	r2, r3, #7
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <SSD1306_UpdateScreen+0x64>)
 8001934:	18d2      	adds	r2, r2, r3
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 f96c 	bl	8001c18 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	3201      	adds	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b07      	cmp	r3, #7
 8001950:	d9d9      	bls.n	8001906 <SSD1306_UpdateScreen+0xe>
	}
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200000c4 	.word	0x200000c4

08001960 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	0002      	movs	r2, r0
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <SSD1306_Fill+0x18>
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <SSD1306_Fill+0x1a>
 8001978:	23ff      	movs	r3, #255	; 0xff
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	00d2      	lsls	r2, r2, #3
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <SSD1306_Fill+0x30>)
 8001980:	0019      	movs	r1, r3
 8001982:	f002 fb15 	bl	8003fb0 <memset>
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	200000c4 	.word	0x200000c4

08001994 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	0004      	movs	r4, r0
 800199c:	0008      	movs	r0, r1
 800199e:	0011      	movs	r1, r2
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	1c22      	adds	r2, r4, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	1c02      	adds	r2, r0, #0
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	1cfb      	adds	r3, r7, #3
 80019ae:	1c0a      	adds	r2, r1, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	if (
 80019b2:	1dbb      	adds	r3, r7, #6
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b7f      	cmp	r3, #127	; 0x7f
 80019b8:	d852      	bhi.n	8001a60 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	2b3f      	cmp	r3, #63	; 0x3f
 80019c0:	d84e      	bhi.n	8001a60 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019c2:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <SSD1306_DrawPixel+0xd4>)
 80019c4:	791b      	ldrb	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80019ca:	1cfb      	adds	r3, r7, #3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	425a      	negs	r2, r3
 80019d0:	4153      	adcs	r3, r2
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	1cfb      	adds	r3, r7, #3
 80019d6:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80019d8:	1cfb      	adds	r3, r7, #3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d11e      	bne.n	8001a1e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b298      	uxth	r0, r3
 80019ec:	0003      	movs	r3, r0
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <SSD1306_DrawPixel+0xd8>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	b25a      	sxtb	r2, r3
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2107      	movs	r1, #7
 80019fe:	400b      	ands	r3, r1
 8001a00:	2101      	movs	r1, #1
 8001a02:	4099      	lsls	r1, r3
 8001a04:	000b      	movs	r3, r1
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b259      	sxtb	r1, r3
 8001a0c:	1dbb      	adds	r3, r7, #6
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	0003      	movs	r3, r0
 8001a12:	01db      	lsls	r3, r3, #7
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	b2c9      	uxtb	r1, r1
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <SSD1306_DrawPixel+0xd8>)
 8001a1a:	54d1      	strb	r1, [r2, r3]
 8001a1c:	e021      	b.n	8001a62 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a1e:	1dbb      	adds	r3, r7, #6
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	01db      	lsls	r3, r3, #7
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <SSD1306_DrawPixel+0xd8>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	1d3a      	adds	r2, r7, #4
 8001a38:	8812      	ldrh	r2, [r2, #0]
 8001a3a:	2107      	movs	r1, #7
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4091      	lsls	r1, r2
 8001a42:	000a      	movs	r2, r1
 8001a44:	b252      	sxtb	r2, r2
 8001a46:	43d2      	mvns	r2, r2
 8001a48:	b252      	sxtb	r2, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	b259      	sxtb	r1, r3
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	0003      	movs	r3, r0
 8001a54:	01db      	lsls	r3, r3, #7
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	b2c9      	uxtb	r1, r1
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <SSD1306_DrawPixel+0xd8>)
 8001a5c:	54d1      	strb	r1, [r2, r3]
 8001a5e:	e000      	b.n	8001a62 <SSD1306_DrawPixel+0xce>
		return;
 8001a60:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b003      	add	sp, #12
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	200004c4 	.word	0x200004c4
 8001a6c:	200000c4 	.word	0x200000c4

08001a70 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	0002      	movs	r2, r0
 8001a78:	1dbb      	adds	r3, r7, #6
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	1c0a      	adds	r2, r1, #0
 8001a80:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SSD1306_GotoXY+0x2c>)
 8001a84:	1dba      	adds	r2, r7, #6
 8001a86:	8812      	ldrh	r2, [r2, #0]
 8001a88:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SSD1306_GotoXY+0x2c>)
 8001a8c:	1d3a      	adds	r2, r7, #4
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	805a      	strh	r2, [r3, #2]
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	200004c4 	.word	0x200004c4

08001aa0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6039      	str	r1, [r7, #0]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	1c02      	adds	r2, r0, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	1dbb      	adds	r3, r7, #6
 8001ab2:	1c0a      	adds	r2, r1, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	001a      	movs	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	18d3      	adds	r3, r2, r3
	if (
 8001ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac4:	dc07      	bgt.n	8001ad6 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ac6:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001ac8:	885b      	ldrh	r3, [r3, #2]
 8001aca:	001a      	movs	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ad2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ad4:	dd01      	ble.n	8001ada <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e05e      	b.n	8001b98 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e04a      	b.n	8001b76 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	1dfb      	adds	r3, r7, #7
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	3b20      	subs	r3, #32
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	7849      	ldrb	r1, [r1, #1]
 8001aee:	434b      	muls	r3, r1
 8001af0:	0019      	movs	r1, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	18cb      	adds	r3, r1, r3
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	18d3      	adds	r3, r2, r3
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e02f      	b.n	8001b64 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d011      	beq.n	8001b36 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	18d3      	adds	r3, r2, r3
 8001b1c:	b298      	uxth	r0, r3
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b20:	885a      	ldrh	r2, [r3, #2]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	001a      	movs	r2, r3
 8001b30:	f7ff ff30 	bl	8001994 <SSD1306_DrawPixel>
 8001b34:	e013      	b.n	8001b5e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b38:	881a      	ldrh	r2, [r3, #0]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	18d3      	adds	r3, r2, r3
 8001b40:	b298      	uxth	r0, r3
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b44:	885a      	ldrh	r2, [r3, #2]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	1dbb      	adds	r3, r7, #6
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	425a      	negs	r2, r3
 8001b54:	4153      	adcs	r3, r2
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	001a      	movs	r2, r3
 8001b5a:	f7ff ff1b 	bl	8001994 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	3301      	adds	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d3c9      	bcc.n	8001b04 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d3ae      	bcc.n	8001ae0 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	18d3      	adds	r3, r2, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <SSD1306_Putc+0x100>)
 8001b92:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200004c4 	.word	0x200004c4

08001ba4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001bb2:	e013      	b.n	8001bdc <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	7818      	ldrb	r0, [r3, #0]
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	f7ff ff6e 	bl	8001aa0 <SSD1306_Putc>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d002      	beq.n	8001bd6 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	e008      	b.n	8001be8 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e7      	bne.n	8001bb4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	781b      	ldrb	r3, [r3, #0]
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <ssd1306_I2C_Init+0x24>)
 8001bf8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bfa:	e002      	b.n	8001c02 <ssd1306_I2C_Init+0x12>
		p--;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f9      	bne.n	8001bfc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	0003d090 	.word	0x0003d090

08001c18 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b0c6      	sub	sp, #280	; 0x118
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	0004      	movs	r4, r0
 8001c20:	0008      	movs	r0, r1
 8001c22:	603a      	str	r2, [r7, #0]
 8001c24:	0019      	movs	r1, r3
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <ssd1306_I2C_WriteMulti+0xc4>)
 8001c28:	2588      	movs	r5, #136	; 0x88
 8001c2a:	006d      	lsls	r5, r5, #1
 8001c2c:	195b      	adds	r3, r3, r5
 8001c2e:	19db      	adds	r3, r3, r7
 8001c30:	1c22      	adds	r2, r4, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c36:	002c      	movs	r4, r5
 8001c38:	191b      	adds	r3, r3, r4
 8001c3a:	19db      	adds	r3, r3, r7
 8001c3c:	1c02      	adds	r2, r0, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001c42:	0020      	movs	r0, r4
 8001c44:	181b      	adds	r3, r3, r0
 8001c46:	19db      	adds	r3, r3, r7
 8001c48:	1c0a      	adds	r2, r1, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c4c:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <ssd1306_I2C_WriteMulti+0xd0>)
 8001c4e:	181b      	adds	r3, r3, r0
 8001c50:	19db      	adds	r3, r3, r7
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c54:	1812      	adds	r2, r2, r0
 8001c56:	19d2      	adds	r2, r2, r7
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	33ff      	adds	r3, #255	; 0xff
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e014      	b.n	8001c92 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001c68:	2010      	movs	r0, #16
 8001c6a:	30ff      	adds	r0, #255	; 0xff
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	18d2      	adds	r2, r2, r3
 8001c74:	183b      	adds	r3, r7, r0
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	7811      	ldrb	r1, [r2, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <ssd1306_I2C_WriteMulti+0xd0>)
 8001c7e:	2488      	movs	r4, #136	; 0x88
 8001c80:	0064      	lsls	r4, r4, #1
 8001c82:	1912      	adds	r2, r2, r4
 8001c84:	19d2      	adds	r2, r2, r7
 8001c86:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	3201      	adds	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	2310      	movs	r3, #16
 8001c94:	33ff      	adds	r3, #255	; 0xff
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001c9e:	2188      	movs	r1, #136	; 0x88
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	1852      	adds	r2, r2, r1
 8001ca4:	19d2      	adds	r2, r2, r7
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8dd      	bhi.n	8001c68 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <ssd1306_I2C_WriteMulti+0xc4>)
 8001cae:	000a      	movs	r2, r1
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	19db      	adds	r3, r3, r7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <ssd1306_I2C_WriteMulti+0xcc>)
 8001cba:	189b      	adds	r3, r3, r2
 8001cbc:	19db      	adds	r3, r3, r7
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	18ba      	adds	r2, r7, r2
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <ssd1306_I2C_WriteMulti+0xd4>)
 8001cca:	240a      	movs	r4, #10
 8001ccc:	9400      	str	r4, [sp, #0]
 8001cce:	f000 fc6f 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b044      	add	sp, #272	; 0x110
 8001cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	fffffef7 	.word	0xfffffef7
 8001ce0:	fffffef6 	.word	0xfffffef6
 8001ce4:	fffffef4 	.word	0xfffffef4
 8001ce8:	fffffefc 	.word	0xfffffefc
 8001cec:	20000030 	.word	0x20000030

08001cf0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	0004      	movs	r4, r0
 8001cf8:	0008      	movs	r0, r1
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	1c22      	adds	r2, r4, #0
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	1c02      	adds	r2, r0, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	1d7b      	adds	r3, r7, #5
 8001d0a:	1c0a      	adds	r2, r1, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001d0e:	200c      	movs	r0, #12
 8001d10:	183b      	adds	r3, r7, r0
 8001d12:	1dba      	adds	r2, r7, #6
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	1d7a      	adds	r2, r7, #5
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b299      	uxth	r1, r3
 8001d26:	183a      	adds	r2, r7, r0
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <ssd1306_I2C_Write+0x4c>)
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f000 fc3e 	bl	80025b0 <HAL_I2C_Master_Transmit>
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b005      	add	sp, #20
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	20000030 	.word	0x20000030

08001d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x44>)
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_MspInit+0x44>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	619a      	str	r2, [r3, #24]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_MspInit+0x44>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_MspInit+0x44>)
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_MspInit+0x44>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0549      	lsls	r1, r1, #21
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	61da      	str	r2, [r3, #28]
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_MspInit+0x44>)
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	055b      	lsls	r3, r3, #21
 8001d74:	4013      	ands	r3, r2
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b08b      	sub	sp, #44	; 0x2c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	2414      	movs	r4, #20
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	0018      	movs	r0, r3
 8001d96:	2314      	movs	r3, #20
 8001d98:	001a      	movs	r2, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f002 f908 	bl	8003fb0 <memset>
  if(hi2c->Instance==I2C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_I2C_MspInit+0x90>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d131      	bne.n	8001e0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	02c9      	lsls	r1, r1, #11
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	02db      	lsls	r3, r3, #11
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc6:	0021      	movs	r1, r4
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	22c0      	movs	r2, #192	; 0xc0
 8001dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2212      	movs	r2, #18
 8001dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2201      	movs	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_I2C_MspInit+0x98>)
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f000 f997 	bl	8002120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	0389      	lsls	r1, r1, #14
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_I2C_MspInit+0x94>)
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	039b      	lsls	r3, r3, #14
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b00b      	add	sp, #44	; 0x2c
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_TIM_Base_MspInit+0x38>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10d      	bne.n	8001e52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0249      	lsls	r1, r1, #9
 8001e40:	430a      	orrs	r2, r1
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_TIM_Base_MspInit+0x3c>)
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40021000 	.word	0x40021000

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f87a 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopForever+0xe>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopForever+0x16>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ec6:	f7ff ffe4 	bl	8001e92 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001eca:	f002 f831 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ece:	f7ff f985 	bl	80011dc <main>

08001ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ed2:	e7fe      	b.n	8001ed2 <LoopForever>
  ldr   r0, =_estack
 8001ed4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001ee0:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 8001ee4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ee8:	200004d0 	.word	0x200004d0

08001eec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC1_COMP_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_Init+0x24>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_Init+0x24>)
 8001efa:	2110      	movs	r1, #16
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f809 	bl	8001f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f06:	f7ff ff1b 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_InitTick+0x5c>)
 8001f22:	681c      	ldr	r4, [r3, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_InitTick+0x60>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	0019      	movs	r1, r3
 8001f2a:	23fa      	movs	r3, #250	; 0xfa
 8001f2c:	0098      	lsls	r0, r3, #2
 8001f2e:	f7fe f8eb 	bl	8000108 <__udivsi3>
 8001f32:	0003      	movs	r3, r0
 8001f34:	0019      	movs	r1, r3
 8001f36:	0020      	movs	r0, r4
 8001f38:	f7fe f8e6 	bl	8000108 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 f8e1 	bl	8002106 <HAL_SYSTICK_Config>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e00f      	b.n	8001f6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d80b      	bhi.n	8001f6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	2301      	movs	r3, #1
 8001f56:	425b      	negs	r3, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f8be 	bl	80020dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_InitTick+0x64>)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b003      	add	sp, #12
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	2000000c 	.word	0x2000000c

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	20000010 	.word	0x20000010
 8001fa0:	200004cc 	.word	0x200004cc

08001fa4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	200004cc 	.word	0x200004cc

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b7f      	cmp	r3, #127	; 0x7f
 8001fcc:	d828      	bhi.n	8002020 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <__NVIC_SetPriority+0xd4>)
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	33c0      	adds	r3, #192	; 0xc0
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	589b      	ldr	r3, [r3, r2]
 8001fde:	1dfa      	adds	r2, r7, #7
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	21ff      	movs	r1, #255	; 0xff
 8001fec:	4091      	lsls	r1, r2
 8001fee:	000a      	movs	r2, r1
 8001ff0:	43d2      	mvns	r2, r2
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0018      	movs	r0, r3
 8002004:	2303      	movs	r3, #3
 8002006:	4003      	ands	r3, r0
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <__NVIC_SetPriority+0xd4>)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	430a      	orrs	r2, r1
 8002018:	33c0      	adds	r3, #192	; 0xc0
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800201e:	e031      	b.n	8002084 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <__NVIC_SetPriority+0xd8>)
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	0019      	movs	r1, r3
 8002028:	230f      	movs	r3, #15
 800202a:	400b      	ands	r3, r1
 800202c:	3b08      	subs	r3, #8
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3306      	adds	r3, #6
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	3304      	adds	r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1dfa      	adds	r2, r7, #7
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	0011      	movs	r1, r2
 8002040:	2203      	movs	r2, #3
 8002042:	400a      	ands	r2, r1
 8002044:	00d2      	lsls	r2, r2, #3
 8002046:	21ff      	movs	r1, #255	; 0xff
 8002048:	4091      	lsls	r1, r2
 800204a:	000a      	movs	r2, r1
 800204c:	43d2      	mvns	r2, r2
 800204e:	401a      	ands	r2, r3
 8002050:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	401a      	ands	r2, r3
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0018      	movs	r0, r3
 8002060:	2303      	movs	r3, #3
 8002062:	4003      	ands	r3, r0
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <__NVIC_SetPriority+0xd8>)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	001c      	movs	r4, r3
 8002070:	230f      	movs	r3, #15
 8002072:	4023      	ands	r3, r4
 8002074:	3b08      	subs	r3, #8
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	430a      	orrs	r2, r1
 800207a:	3306      	adds	r3, #6
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	18c3      	adds	r3, r0, r3
 8002080:	3304      	adds	r3, #4
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b003      	add	sp, #12
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	045b      	lsls	r3, r3, #17
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d301      	bcc.n	80020ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a8:	2301      	movs	r3, #1
 80020aa:	e010      	b.n	80020ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <SysTick_Config+0x44>)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	3a01      	subs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b4:	2301      	movs	r3, #1
 80020b6:	425b      	negs	r3, r3
 80020b8:	2103      	movs	r1, #3
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff ff7c 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x44>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x44>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	210f      	movs	r1, #15
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	1c02      	adds	r2, r0, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff ffbf 	bl	8002094 <SysTick_Config>
 8002116:	0003      	movs	r3, r0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212e:	e155      	b.n	80023dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4091      	lsls	r1, r2
 800213a:	000a      	movs	r2, r1
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d100      	bne.n	8002148 <HAL_GPIO_Init+0x28>
 8002146:	e146      	b.n	80023d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	4013      	ands	r3, r2
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800215c:	2b02      	cmp	r3, #2
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	409a      	lsls	r2, r3
 8002182:	0013      	movs	r3, r2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	43da      	mvns	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	2201      	movs	r2, #1
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d017      	beq.n	80021fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	4013      	ands	r3, r2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d123      	bne.n	8002252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	58d3      	ldr	r3, [r2, r3]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2207      	movs	r2, #7
 800221c:	4013      	ands	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2107      	movs	r1, #7
 8002236:	400b      	ands	r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	6939      	ldr	r1, [r7, #16]
 8002250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	401a      	ands	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	029b      	lsls	r3, r3, #10
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_GPIO_Init+0x174>
 8002292:	e0a0      	b.n	80023d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_GPIO_Init+0x2d4>)
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_GPIO_Init+0x2d4>)
 800229a:	2101      	movs	r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_GPIO_Init+0x2d4>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4013      	ands	r3, r2
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_GPIO_Init+0x2d8>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	589b      	ldr	r3, [r3, r2]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2203      	movs	r2, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	2390      	movs	r3, #144	; 0x90
 80022d4:	05db      	lsls	r3, r3, #23
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x1ee>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a47      	ldr	r2, [pc, #284]	; (80023fc <HAL_GPIO_Init+0x2dc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x1ea>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a46      	ldr	r2, [pc, #280]	; (8002400 <HAL_GPIO_Init+0x2e0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x1e6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a45      	ldr	r2, [pc, #276]	; (8002404 <HAL_GPIO_Init+0x2e4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x1e2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a44      	ldr	r2, [pc, #272]	; (8002408 <HAL_GPIO_Init+0x2e8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x1de>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x1f0>
 80022fe:	2305      	movs	r3, #5
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x1f0>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x1f0>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x1f0>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x1f0>
 800230e:	2300      	movs	r3, #0
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	2103      	movs	r1, #3
 8002314:	400a      	ands	r2, r1
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002320:	4935      	ldr	r1, [pc, #212]	; (80023f8 <HAL_GPIO_Init+0x2d8>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <HAL_GPIO_Init+0x2ec>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43da      	mvns	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4013      	ands	r3, r2
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <HAL_GPIO_Init+0x2ec>)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_GPIO_Init+0x2ec>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43da      	mvns	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	029b      	lsls	r3, r3, #10
 8002370:	4013      	ands	r3, r2
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_GPIO_Init+0x2ec>)
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_GPIO_Init+0x2ec>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	035b      	lsls	r3, r3, #13
 800239a:	4013      	ands	r3, r2
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_GPIO_Init+0x2ec>)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_GPIO_Init+0x2ec>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	039b      	lsls	r3, r3, #14
 80023c4:	4013      	ands	r3, r2
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_GPIO_Init+0x2ec>)
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	1e13      	subs	r3, r2, #0
 80023e6:	d000      	beq.n	80023ea <HAL_GPIO_Init+0x2ca>
 80023e8:	e6a2      	b.n	8002130 <HAL_GPIO_Init+0x10>
  } 
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b006      	add	sp, #24
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	48000400 	.word	0x48000400
 8002400:	48000800 	.word	0x48000800
 8002404:	48000c00 	.word	0x48000c00
 8002408:	48001000 	.word	0x48001000
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	000a      	movs	r2, r1
 800241a:	1cbb      	adds	r3, r7, #2
 800241c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	1cba      	adds	r2, r7, #2
 8002424:	8812      	ldrh	r2, [r2, #0]
 8002426:	4013      	ands	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e003      	b.n	800243c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800243c:	230f      	movs	r3, #15
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	781b      	ldrb	r3, [r3, #0]
  }
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	0008      	movs	r0, r1
 8002454:	0011      	movs	r1, r2
 8002456:	1cbb      	adds	r3, r7, #2
 8002458:	1c02      	adds	r2, r0, #0
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	1c7b      	adds	r3, r7, #1
 800245e:	1c0a      	adds	r2, r1, #0
 8002460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002462:	1c7b      	adds	r3, r7, #1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800246a:	1cbb      	adds	r3, r7, #2
 800246c:	881a      	ldrh	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002472:	e003      	b.n	800247c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e082      	b.n	800259c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2241      	movs	r2, #65	; 0x41
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff fc6b 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2241      	movs	r2, #65	; 0x41
 80024b6:	2124      	movs	r1, #36	; 0x24
 80024b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4934      	ldr	r1, [pc, #208]	; (80025a4 <HAL_I2C_Init+0x120>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4931      	ldr	r1, [pc, #196]	; (80025a8 <HAL_I2C_Init+0x124>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d108      	bne.n	8002502 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0209      	lsls	r1, r1, #8
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	e007      	b.n	8002512 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2184      	movs	r1, #132	; 0x84
 800250c:	0209      	lsls	r1, r1, #8
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d104      	bne.n	8002524 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	491f      	ldr	r1, [pc, #124]	; (80025ac <HAL_I2C_Init+0x128>)
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	491a      	ldr	r1, [pc, #104]	; (80025a8 <HAL_I2C_Init+0x124>)
 8002540:	400a      	ands	r2, r1
 8002542:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	431a      	orrs	r2, r3
 800254e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69d9      	ldr	r1, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2241      	movs	r2, #65	; 0x41
 8002588:	2120      	movs	r1, #32
 800258a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2242      	movs	r2, #66	; 0x42
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	f0ffffff 	.word	0xf0ffffff
 80025a8:	ffff7fff 	.word	0xffff7fff
 80025ac:	02008000 	.word	0x02008000

080025b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	0008      	movs	r0, r1
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	0019      	movs	r1, r3
 80025be:	230a      	movs	r3, #10
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	1c02      	adds	r2, r0, #0
 80025c4:	801a      	strh	r2, [r3, #0]
 80025c6:	2308      	movs	r3, #8
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	1c0a      	adds	r2, r1, #0
 80025cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2241      	movs	r2, #65	; 0x41
 80025d2:	5c9b      	ldrb	r3, [r3, r2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d000      	beq.n	80025dc <HAL_I2C_Master_Transmit+0x2c>
 80025da:	e0e7      	b.n	80027ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	5c9b      	ldrb	r3, [r3, r2]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_I2C_Master_Transmit+0x3a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e0e1      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025f2:	f7ff fcd7 	bl	8001fa4 <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	0219      	lsls	r1, r3, #8
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2319      	movs	r3, #25
 8002606:	2201      	movs	r2, #1
 8002608:	f000 fa16 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cc      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2241      	movs	r2, #65	; 0x41
 8002618:	2121      	movs	r1, #33	; 0x21
 800261a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2242      	movs	r2, #66	; 0x42
 8002620:	2110      	movs	r1, #16
 8002622:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2208      	movs	r2, #8
 8002634:	18ba      	adds	r2, r7, r2
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	; 0xff
 8002648:	d911      	bls.n	800266e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	045c      	lsls	r4, r3, #17
 800265a:	230a      	movs	r3, #10
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	8819      	ldrh	r1, [r3, #0]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <HAL_I2C_Master_Transmit+0x208>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	0023      	movs	r3, r4
 8002668:	f000 fb1a 	bl	8002ca0 <I2C_TransferConfig>
 800266c:	e075      	b.n	800275a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	b2da      	uxtb	r2, r3
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	049c      	lsls	r4, r3, #18
 8002682:	230a      	movs	r3, #10
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	8819      	ldrh	r1, [r3, #0]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_I2C_Master_Transmit+0x208>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	0023      	movs	r3, r4
 8002690:	f000 fb06 	bl	8002ca0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002694:	e061      	b.n	800275a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fa0a 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e081      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03a      	beq.n	800275a <HAL_I2C_Master_Transmit+0x1aa>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d136      	bne.n	800275a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	0013      	movs	r3, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	f000 f99d 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e053      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2bff      	cmp	r3, #255	; 0xff
 800270e:	d911      	bls.n	8002734 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	22ff      	movs	r2, #255	; 0xff
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	045c      	lsls	r4, r3, #17
 8002720:	230a      	movs	r3, #10
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	8819      	ldrh	r1, [r3, #0]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	0023      	movs	r3, r4
 800272e:	f000 fab7 	bl	8002ca0 <I2C_TransferConfig>
 8002732:	e012      	b.n	800275a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	b2da      	uxtb	r2, r3
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	049c      	lsls	r4, r3, #18
 8002748:	230a      	movs	r3, #10
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	8819      	ldrh	r1, [r3, #0]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	0023      	movs	r3, r4
 8002756:	f000 faa3 	bl	8002ca0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d198      	bne.n	8002696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f9e2 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01a      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	490c      	ldr	r1, [pc, #48]	; (80027bc <HAL_I2C_Master_Transmit+0x20c>)
 800278c:	400a      	ands	r2, r1
 800278e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2241      	movs	r2, #65	; 0x41
 8002794:	2120      	movs	r1, #32
 8002796:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2242      	movs	r2, #66	; 0x42
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b007      	add	sp, #28
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	80002000 	.word	0x80002000
 80027bc:	fe00e800 	.word	0xfe00e800

080027c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	230a      	movs	r3, #10
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	1c0a      	adds	r2, r1, #0
 80027d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2241      	movs	r2, #65	; 0x41
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d000      	beq.n	80027e6 <HAL_I2C_IsDeviceReady+0x26>
 80027e4:	e0fe      	b.n	80029e4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	401a      	ands	r2, r3
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d101      	bne.n	80027fe <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
 80027fc:	e0f3      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_I2C_IsDeviceReady+0x4c>
 8002808:	2302      	movs	r3, #2
 800280a:	e0ec      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2241      	movs	r2, #65	; 0x41
 8002818:	2124      	movs	r1, #36	; 0x24
 800281a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x7a>
 800282a:	230a      	movs	r3, #10
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	059b      	lsls	r3, r3, #22
 8002832:	0d9b      	lsrs	r3, r3, #22
 8002834:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_I2C_IsDeviceReady+0x230>)
 8002836:	431a      	orrs	r2, r3
 8002838:	e007      	b.n	800284a <HAL_I2C_IsDeviceReady+0x8a>
 800283a:	230a      	movs	r3, #10
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	059b      	lsls	r3, r3, #22
 8002842:	0d9b      	lsrs	r3, r3, #22
 8002844:	22a0      	movs	r2, #160	; 0xa0
 8002846:	0192      	lsls	r2, r2, #6
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002850:	f7ff fba8 	bl	8001fa4 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2220      	movs	r2, #32
 8002860:	4013      	ands	r3, r2
 8002862:	3b20      	subs	r3, #32
 8002864:	425a      	negs	r2, r3
 8002866:	4153      	adcs	r3, r2
 8002868:	b2da      	uxtb	r2, r3
 800286a:	231f      	movs	r3, #31
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2210      	movs	r2, #16
 8002878:	4013      	ands	r3, r2
 800287a:	3b10      	subs	r3, #16
 800287c:	425a      	negs	r2, r3
 800287e:	4153      	adcs	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	231e      	movs	r3, #30
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002888:	e035      	b.n	80028f6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	d01a      	beq.n	80028c6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7ff fb88 	bl	8001fa4 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <HAL_I2C_IsDeviceReady+0xe6>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2241      	movs	r2, #65	; 0x41
 80028aa:	2120      	movs	r1, #32
 80028ac:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	2220      	movs	r2, #32
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08f      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2220      	movs	r2, #32
 80028ce:	4013      	ands	r3, r2
 80028d0:	3b20      	subs	r3, #32
 80028d2:	425a      	negs	r2, r3
 80028d4:	4153      	adcs	r3, r2
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	231f      	movs	r3, #31
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2210      	movs	r2, #16
 80028e6:	4013      	ands	r3, r2
 80028e8:	3b10      	subs	r3, #16
 80028ea:	425a      	negs	r2, r3
 80028ec:	4153      	adcs	r3, r2
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	231e      	movs	r3, #30
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028f6:	231f      	movs	r3, #31
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <HAL_I2C_IsDeviceReady+0x14a>
 8002900:	231e      	movs	r3, #30
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0bf      	beq.n	800288a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2210      	movs	r2, #16
 8002912:	4013      	ands	r3, r2
 8002914:	2b10      	cmp	r3, #16
 8002916:	d01a      	beq.n	800294e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	0013      	movs	r3, r2
 8002922:	2200      	movs	r2, #0
 8002924:	2120      	movs	r1, #32
 8002926:	f000 f887 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e059      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2241      	movs	r2, #65	; 0x41
 800293e:	2120      	movs	r1, #32
 8002940:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2240      	movs	r2, #64	; 0x40
 8002946:	2100      	movs	r1, #0
 8002948:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e04b      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	0013      	movs	r3, r2
 8002958:	2200      	movs	r2, #0
 800295a:	2120      	movs	r1, #32
 800295c:	f000 f86c 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e03e      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d119      	bne.n	80029b4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	01c9      	lsls	r1, r1, #7
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	0013      	movs	r3, r2
 800299c:	2200      	movs	r2, #0
 800299e:	2120      	movs	r1, #32
 80029a0:	f000 f84a 	bl	8002a38 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01c      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2220      	movs	r2, #32
 80029b2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d900      	bls.n	80029c4 <HAL_I2C_IsDeviceReady+0x204>
 80029c2:	e72e      	b.n	8002822 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2241      	movs	r2, #65	; 0x41
 80029c8:	2120      	movs	r1, #32
 80029ca:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	2220      	movs	r2, #32
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	0018      	movs	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b008      	add	sp, #32
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	02002000 	.word	0x02002000

080029f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d103      	bne.n	8002a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d007      	beq.n	8002a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]
  }
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	e021      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d01e      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7ff faa8 	bl	8001fa4 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d113      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2241      	movs	r2, #65	; 0x41
 8002a76:	2120      	movs	r1, #32
 8002a78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2242      	movs	r2, #66	; 0x42
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2240      	movs	r2, #64	; 0x40
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	425a      	negs	r2, r3
 8002a9e:	4153      	adcs	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d0ce      	beq.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac2:	e02b      	b.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f86e 	bl	8002bac <I2C_IsAcknowledgeFailed>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e029      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	d01e      	beq.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7ff fa61 	bl	8001fa4 <HAL_GetTick>
 8002ae2:	0002      	movs	r2, r0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d113      	bne.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	2220      	movs	r2, #32
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2241      	movs	r2, #65	; 0x41
 8002b04:	2120      	movs	r1, #32
 8002b06:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2242      	movs	r2, #66	; 0x42
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d1cc      	bne.n	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b40:	e028      	b.n	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 f82f 	bl	8002bac <I2C_IsAcknowledgeFailed>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e026      	b.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7ff fa25 	bl	8001fa4 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d113      	bne.n	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	2220      	movs	r2, #32
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2241      	movs	r2, #65	; 0x41
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2242      	movs	r2, #66	; 0x42
 8002b84:	2100      	movs	r1, #0
 8002b86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d1cf      	bne.n	8002b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d164      	bne.n	8002c90 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	049b      	lsls	r3, r3, #18
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	049b      	lsls	r3, r3, #18
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d02b      	beq.n	8002c32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	01c9      	lsls	r1, r1, #7
 8002be8:	430a      	orrs	r2, r1
 8002bea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bec:	e021      	b.n	8002c32 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	d01e      	beq.n	8002c32 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7ff f9d6 	bl	8001fa4 <HAL_GetTick>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_IsAcknowledgeFailed+0x5e>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d113      	bne.n	8002c32 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	2220      	movs	r2, #32
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2241      	movs	r2, #65	; 0x41
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2242      	movs	r2, #66	; 0x42
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2240      	movs	r2, #64	; 0x40
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02f      	b.n	8002c92 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d1d6      	bne.n	8002bee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2210      	movs	r2, #16
 8002c46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff fece 	bl	80029f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	490e      	ldr	r1, [pc, #56]	; (8002c9c <I2C_IsAcknowledgeFailed+0xf0>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2241      	movs	r2, #65	; 0x41
 8002c78:	2120      	movs	r1, #32
 8002c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2242      	movs	r2, #66	; 0x42
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b004      	add	sp, #16
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	fe00e800 	.word	0xfe00e800

08002ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	0008      	movs	r0, r1
 8002caa:	0011      	movs	r1, r2
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	240a      	movs	r4, #10
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	801a      	strh	r2, [r3, #0]
 8002cb6:	2009      	movs	r0, #9
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	1c0a      	adds	r2, r1, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	0d51      	lsrs	r1, r2, #21
 8002cc8:	2280      	movs	r2, #128	; 0x80
 8002cca:	00d2      	lsls	r2, r2, #3
 8002ccc:	400a      	ands	r2, r1
 8002cce:	490e      	ldr	r1, [pc, #56]	; (8002d08 <I2C_TransferConfig+0x68>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	43d2      	mvns	r2, r2
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	0011      	movs	r1, r2
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	059b      	lsls	r3, r3, #22
 8002cde:	0d9a      	lsrs	r2, r3, #22
 8002ce0:	183b      	adds	r3, r7, r0
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	0418      	lsls	r0, r3, #16
 8002ce6:	23ff      	movs	r3, #255	; 0xff
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	4003      	ands	r3, r0
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b005      	add	sp, #20
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	03ff63ff 	.word	0x03ff63ff

08002d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2241      	movs	r2, #65	; 0x41
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d138      	bne.n	8002d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e032      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2241      	movs	r2, #65	; 0x41
 8002d3c:	2124      	movs	r1, #36	; 0x24
 8002d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4911      	ldr	r1, [pc, #68]	; (8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	; 0x41
 8002d84:	2120      	movs	r1, #32
 8002d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	ffffefff 	.word	0xffffefff

08002da4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2241      	movs	r2, #65	; 0x41
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d139      	bne.n	8002e2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e033      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2241      	movs	r2, #65	; 0x41
 8002dd4:	2124      	movs	r1, #36	; 0x24
 8002dd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2241      	movs	r2, #65	; 0x41
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	fffff0ff 	.word	0xfffff0ff

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f000 fb76 	bl	800353c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d100      	bne.n	8002e5c <HAL_RCC_OscConfig+0x20>
 8002e5a:	e08e      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e5c:	4bc5      	ldr	r3, [pc, #788]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	220c      	movs	r2, #12
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00e      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e68:	4bc2      	ldr	r3, [pc, #776]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d117      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x68>
 8002e74:	4bbf      	ldr	r3, [pc, #764]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	23c0      	movs	r3, #192	; 0xc0
 8002e7a:	025b      	lsls	r3, r3, #9
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	025b      	lsls	r3, r3, #9
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10e      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4bbb      	ldr	r3, [pc, #748]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	029b      	lsls	r3, r3, #10
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d100      	bne.n	8002e94 <HAL_RCC_OscConfig+0x58>
 8002e92:	e071      	b.n	8002f78 <HAL_RCC_OscConfig+0x13c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d000      	beq.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e9c:	e06c      	b.n	8002f78 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f000 fb4c 	bl	800353c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x80>
 8002eac:	4bb1      	ldr	r3, [pc, #708]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	0249      	lsls	r1, r1, #9
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e02f      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <HAL_RCC_OscConfig+0xa2>
 8002ec4:	4bab      	ldr	r3, [pc, #684]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4baa      	ldr	r3, [pc, #680]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eca:	49ab      	ldr	r1, [pc, #684]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4ba8      	ldr	r3, [pc, #672]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ed6:	49a9      	ldr	r1, [pc, #676]	; (800317c <HAL_RCC_OscConfig+0x340>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e01e      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0xc8>
 8002ee6:	4ba3      	ldr	r3, [pc, #652]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4ba2      	ldr	r3, [pc, #648]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	02c9      	lsls	r1, r1, #11
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	4b9f      	ldr	r3, [pc, #636]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b9e      	ldr	r3, [pc, #632]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	0249      	lsls	r1, r1, #9
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xe0>
 8002f04:	4b9b      	ldr	r3, [pc, #620]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b9a      	ldr	r3, [pc, #616]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f0a:	499b      	ldr	r1, [pc, #620]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b97      	ldr	r3, [pc, #604]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f16:	4999      	ldr	r1, [pc, #612]	; (800317c <HAL_RCC_OscConfig+0x340>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d014      	beq.n	8002f4e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7ff f83e 	bl	8001fa4 <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2e:	f7ff f839 	bl	8001fa4 <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e2fd      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f40:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0xf2>
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f829 	bl	8001fa4 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7ff f824 	bl	8001fa4 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e2e8      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	029b      	lsls	r3, r3, #10
 8002f72:	4013      	ands	r3, r2
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x11c>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCC_OscConfig+0x14a>
 8002f84:	e06c      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f86:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	220c      	movs	r2, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d11f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1a0>
 8002f9c:	4b75      	ldr	r3, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	23c0      	movs	r3, #192	; 0xc0
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x188>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e2bb      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	22f8      	movs	r2, #248	; 0xf8
 8002fca:	4393      	bics	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00da      	lsls	r2, r3, #3
 8002fd4:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e041      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d024      	beq.n	800302e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b62      	ldr	r3, [pc, #392]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fea:	2101      	movs	r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe ffd8 	bl	8001fa4 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe ffd3 	bl	8001fa4 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e297      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2202      	movs	r2, #2
 8003012:	4013      	ands	r3, r2
 8003014:	d0f1      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b57      	ldr	r3, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	22f8      	movs	r2, #248	; 0xf8
 800301c:	4393      	bics	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00da      	lsls	r2, r3, #3
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe ffb3 	bl	8001fa4 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe ffae 	bl	8001fa4 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e272      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d1f1      	bne.n	8003044 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2208      	movs	r2, #8
 8003066:	4013      	ands	r3, r2
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d019      	beq.n	80030a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b40      	ldr	r3, [pc, #256]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307e:	f7fe ff91 	bl	8001fa4 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe ff8c 	bl	8001fa4 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e250      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2202      	movs	r2, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	d0f1      	beq.n	8003088 <HAL_RCC_OscConfig+0x24c>
 80030a4:	e018      	b.n	80030d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	438a      	bics	r2, r1
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe ff77 	bl	8001fa4 <HAL_GetTick>
 80030b6:	0003      	movs	r3, r0
 80030b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe ff72 	bl	8001fa4 <HAL_GetTick>
 80030c0:	0002      	movs	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e236      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d1f1      	bne.n	80030bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2204      	movs	r2, #4
 80030de:	4013      	ands	r3, r2
 80030e0:	d100      	bne.n	80030e4 <HAL_RCC_OscConfig+0x2a8>
 80030e2:	e0b5      	b.n	8003250 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	201f      	movs	r0, #31
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	055b      	lsls	r3, r3, #21
 80030f4:	4013      	ands	r3, r2
 80030f6:	d110      	bne.n	800311a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0549      	lsls	r1, r1, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	055b      	lsls	r3, r3, #21
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003114:	183b      	adds	r3, r7, r0
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0049      	lsls	r1, r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7fe ff36 	bl	8001fa4 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe ff31 	bl	8001fa4 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1f5      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4013      	ands	r3, r2
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10f      	bne.n	8003184 <HAL_RCC_OscConfig+0x348>
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800316a:	2101      	movs	r1, #1
 800316c:	430a      	orrs	r2, r1
 800316e:	621a      	str	r2, [r3, #32]
 8003170:	e036      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021000 	.word	0x40021000
 8003178:	fffeffff 	.word	0xfffeffff
 800317c:	fffbffff 	.word	0xfffbffff
 8003180:	40007000 	.word	0x40007000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x36a>
 800318c:	4bca      	ldr	r3, [pc, #808]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	4bc9      	ldr	r3, [pc, #804]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003192:	2101      	movs	r1, #1
 8003194:	438a      	bics	r2, r1
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	4bc7      	ldr	r3, [pc, #796]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800319a:	6a1a      	ldr	r2, [r3, #32]
 800319c:	4bc6      	ldr	r3, [pc, #792]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800319e:	2104      	movs	r1, #4
 80031a0:	438a      	bics	r2, r1
 80031a2:	621a      	str	r2, [r3, #32]
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x38c>
 80031ae:	4bc2      	ldr	r3, [pc, #776]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	4bc1      	ldr	r3, [pc, #772]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031b4:	2104      	movs	r1, #4
 80031b6:	430a      	orrs	r2, r1
 80031b8:	621a      	str	r2, [r3, #32]
 80031ba:	4bbf      	ldr	r3, [pc, #764]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	4bbe      	ldr	r3, [pc, #760]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031c0:	2101      	movs	r1, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x3a4>
 80031c8:	4bbb      	ldr	r3, [pc, #748]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4bba      	ldr	r3, [pc, #744]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	4bb8      	ldr	r3, [pc, #736]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4bb7      	ldr	r3, [pc, #732]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80031da:	2104      	movs	r1, #4
 80031dc:	438a      	bics	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d014      	beq.n	8003212 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e8:	f7fe fedc 	bl	8001fa4 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	e009      	b.n	8003206 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fe fed7 	bl	8001fa4 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	4aaf      	ldr	r2, [pc, #700]	; (80034bc <HAL_RCC_OscConfig+0x680>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e19a      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	4bac      	ldr	r3, [pc, #688]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	2202      	movs	r2, #2
 800320c:	4013      	ands	r3, r2
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3b6>
 8003210:	e013      	b.n	800323a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fec7 	bl	8001fa4 <HAL_GetTick>
 8003216:	0003      	movs	r3, r0
 8003218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	e009      	b.n	8003230 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe fec2 	bl	8001fa4 <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	4aa5      	ldr	r2, [pc, #660]	; (80034bc <HAL_RCC_OscConfig+0x680>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e185      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4ba1      	ldr	r3, [pc, #644]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	2202      	movs	r2, #2
 8003236:	4013      	ands	r3, r2
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800323a:	231f      	movs	r3, #31
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	4b9b      	ldr	r3, [pc, #620]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800324a:	499d      	ldr	r1, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x684>)
 800324c:	400a      	ands	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2210      	movs	r2, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d12a      	bne.n	80032b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003262:	4b95      	ldr	r3, [pc, #596]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b94      	ldr	r3, [pc, #592]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003268:	2104      	movs	r1, #4
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800326e:	4b92      	ldr	r3, [pc, #584]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b91      	ldr	r3, [pc, #580]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe fe93 	bl	8001fa4 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003284:	f7fe fe8e 	bl	8001fa4 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e152      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d0f1      	beq.n	8003284 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	22f8      	movs	r2, #248	; 0xf8
 80032a6:	4393      	bics	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	00da      	lsls	r2, r3, #3
 80032b0:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
 80032b6:	e034      	b.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	3305      	adds	r3, #5
 80032be:	d111      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032c0:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032c6:	2104      	movs	r1, #4
 80032c8:	438a      	bics	r2, r1
 80032ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032cc:	4b7a      	ldr	r3, [pc, #488]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	22f8      	movs	r2, #248	; 0xf8
 80032d2:	4393      	bics	r3, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	00da      	lsls	r2, r3, #3
 80032dc:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032de:	430a      	orrs	r2, r1
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
 80032e2:	e01e      	b.n	8003322 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032ea:	2104      	movs	r1, #4
 80032ec:	430a      	orrs	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032f0:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	438a      	bics	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fc:	f7fe fe52 	bl	8001fa4 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003306:	f7fe fe4d 	bl	8001fa4 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e111      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003318:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	4013      	ands	r3, r2
 800332a:	d05c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800332c:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	220c      	movs	r2, #12
 8003332:	4013      	ands	r3, r2
 8003334:	2b0c      	cmp	r3, #12
 8003336:	d00e      	beq.n	8003356 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003338:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	220c      	movs	r2, #12
 800333e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003340:	2b08      	cmp	r3, #8
 8003342:	d114      	bne.n	800336e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003344:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	23c0      	movs	r3, #192	; 0xc0
 800334a:	025b      	lsls	r3, r3, #9
 800334c:	401a      	ands	r2, r3
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	025b      	lsls	r3, r3, #9
 8003352:	429a      	cmp	r2, r3
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003356:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	025b      	lsls	r3, r3, #9
 800335e:	4013      	ands	r3, r2
 8003360:	d040      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5a8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d03c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0e6      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01b      	beq.n	80033ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	0249      	lsls	r1, r1, #9
 8003380:	430a      	orrs	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003384:	f7fe fe0e 	bl	8001fa4 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800338e:	f7fe fe09 	bl	8001fa4 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e0cd      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80033a0:	4b45      	ldr	r3, [pc, #276]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x552>
 80033ac:	e01b      	b.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033b4:	4943      	ldr	r1, [pc, #268]	; (80034c4 <HAL_RCC_OscConfig+0x688>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fdf3 	bl	8001fa4 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033c4:	f7fe fdee 	bl	8001fa4 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0b2      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	025b      	lsls	r3, r3, #9
 80033de:	4013      	ands	r3, r2
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x588>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80033e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d100      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5b4>
 80033ee:	e0a4      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f0:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	220c      	movs	r2, #12
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d100      	bne.n	80033fe <HAL_RCC_OscConfig+0x5c2>
 80033fc:	e078      	b.n	80034f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b02      	cmp	r3, #2
 8003404:	d14c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800340c:	492e      	ldr	r1, [pc, #184]	; (80034c8 <HAL_RCC_OscConfig+0x68c>)
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fe fdc7 	bl	8001fa4 <HAL_GetTick>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe fdc2 	bl	8001fa4 <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e086      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	4013      	ands	r3, r2
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	220f      	movs	r2, #15
 8003440:	4393      	bics	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800344a:	430a      	orrs	r2, r1
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_RCC_OscConfig+0x690>)
 8003454:	4013      	ands	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	431a      	orrs	r2, r3
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0449      	lsls	r1, r1, #17
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fd95 	bl	8001fa4 <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe fd90 	bl	8001fa4 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e054      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	049b      	lsls	r3, r3, #18
 800349a:	4013      	ands	r3, r2
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x644>
 800349e:	e04c      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_OscConfig+0x67c>)
 80034a6:	4908      	ldr	r1, [pc, #32]	; (80034c8 <HAL_RCC_OscConfig+0x68c>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fd7a 	bl	8001fa4 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000
 80034bc:	00001388 	.word	0x00001388
 80034c0:	efffffff 	.word	0xefffffff
 80034c4:	fffeffff 	.word	0xfffeffff
 80034c8:	feffffff 	.word	0xfeffffff
 80034cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fd68 	bl	8001fa4 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e02c      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	049b      	lsls	r3, r3, #18
 80034ea:	4013      	ands	r3, r2
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x694>
 80034ee:	e024      	b.n	800353a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e01f      	b.n	800353c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_RCC_OscConfig+0x708>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	23c0      	movs	r3, #192	; 0xc0
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d10e      	bne.n	8003536 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	220f      	movs	r2, #15
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d107      	bne.n	8003536 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	23f0      	movs	r3, #240	; 0xf0
 800352a:	039b      	lsls	r3, r3, #14
 800352c:	401a      	ands	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b008      	add	sp, #32
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0bf      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d911      	bls.n	800358e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4393      	bics	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	4013      	ands	r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0a6      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d015      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d006      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035a2:	4b51      	ldr	r3, [pc, #324]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035a8:	21e0      	movs	r1, #224	; 0xe0
 80035aa:	00c9      	lsls	r1, r1, #3
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	22f0      	movs	r2, #240	; 0xf0
 80035b6:	4393      	bics	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2201      	movs	r2, #1
 80035ca:	4013      	ands	r3, r2
 80035cc:	d04c      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	4013      	ands	r3, r2
 80035e0:	d120      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07a      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	049b      	lsls	r3, r3, #18
 80035f6:	4013      	ands	r3, r2
 80035f8:	d114      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06e      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	025b      	lsls	r3, r3, #9
 800360e:	4013      	ands	r3, r2
 8003610:	d108      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e062      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e05b      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	4393      	bics	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fe fcb4 	bl	8001fa4 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003640:	e009      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003642:	f7fe fcaf 	bl	8001fa4 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_RCC_ClockConfig+0x1a4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e042      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	220c      	movs	r2, #12
 800365c:	401a      	ands	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1ec      	bne.n	8003642 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d211      	bcs.n	800369a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	4393      	bics	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x19c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d001      	beq.n	800369a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e020      	b.n	80036dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2204      	movs	r2, #4
 80036a0:	4013      	ands	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_RCC_ClockConfig+0x1a8>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036b8:	f000 f820 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036bc:	0001      	movs	r1, r0
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x1a0>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	220f      	movs	r2, #15
 80036c6:	4013      	ands	r3, r2
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x1ac>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	000a      	movs	r2, r1
 80036ce:	40da      	lsrs	r2, r3
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1b0>)
 80036d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7fe fc1f 	bl	8001f18 <HAL_InitTick>
  
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	00001388 	.word	0x00001388
 80036f0:	fffff8ff 	.word	0xfffff8ff
 80036f4:	08004e64 	.word	0x08004e64
 80036f8:	20000008 	.word	0x20000008

080036fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b08f      	sub	sp, #60	; 0x3c
 8003700:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003702:	2314      	movs	r3, #20
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xec>)
 8003708:	ca13      	ldmia	r2!, {r0, r1, r4}
 800370a:	c313      	stmia	r3!, {r0, r1, r4}
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <HAL_RCC_GetSysClockFreq+0xf0>)
 8003714:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003716:	c313      	stmia	r3!, {r0, r1, r4}
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	220c      	movs	r2, #12
 800373a:	4013      	ands	r3, r2
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d047      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0xd4>
 8003740:	d849      	bhi.n	80037d6 <HAL_RCC_GetSysClockFreq+0xda>
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x50>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x56>
 800374a:	e044      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003750:	e044      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	0c9b      	lsrs	r3, r3, #18
 8003756:	220f      	movs	r2, #15
 8003758:	4013      	ands	r3, r2
 800375a:	2214      	movs	r2, #20
 800375c:	18ba      	adds	r2, r7, r2
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	220f      	movs	r2, #15
 8003768:	4013      	ands	r3, r2
 800376a:	1d3a      	adds	r2, r7, #4
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003772:	23c0      	movs	r3, #192	; 0xc0
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	401a      	ands	r2, r3
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	025b      	lsls	r3, r3, #9
 800377c:	429a      	cmp	r2, r3
 800377e:	d109      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	481c      	ldr	r0, [pc, #112]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003784:	f7fc fcc0 	bl	8000108 <__udivsi3>
 8003788:	0003      	movs	r3, r0
 800378a:	001a      	movs	r2, r3
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	4353      	muls	r3, r2
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
 8003792:	e01a      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003796:	23c0      	movs	r3, #192	; 0xc0
 8003798:	025b      	lsls	r3, r3, #9
 800379a:	401a      	ands	r2, r3
 800379c:	23c0      	movs	r3, #192	; 0xc0
 800379e:	025b      	lsls	r3, r3, #9
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a6:	4814      	ldr	r0, [pc, #80]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037a8:	f7fc fcae 	bl	8000108 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	001a      	movs	r2, r3
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	4353      	muls	r3, r2
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	e008      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ba:	480e      	ldr	r0, [pc, #56]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037bc:	f7fc fca4 	bl	8000108 <__udivsi3>
 80037c0:	0003      	movs	r3, r0
 80037c2:	001a      	movs	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	4353      	muls	r3, r2
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037ce:	e005      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b00f      	add	sp, #60	; 0x3c
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	08004068 	.word	0x08004068
 80037ec:	08004078 	.word	0x08004078
 80037f0:	40021000 	.word	0x40021000
 80037f4:	007a1200 	.word	0x007a1200
 80037f8:	02dc6c00 	.word	0x02dc6c00

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	025b      	lsls	r3, r3, #9
 8003814:	4013      	ands	r3, r2
 8003816:	d100      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003818:	e08e      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2017      	movs	r0, #23
 800381c:	183b      	adds	r3, r7, r0
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b6e      	ldr	r3, [pc, #440]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003824:	69da      	ldr	r2, [r3, #28]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	055b      	lsls	r3, r3, #21
 800382a:	4013      	ands	r3, r2
 800382c:	d110      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	4b6b      	ldr	r3, [pc, #428]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	0549      	lsls	r1, r1, #21
 8003838:	430a      	orrs	r2, r1
 800383a:	61da      	str	r2, [r3, #28]
 800383c:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	055b      	lsls	r3, r3, #21
 8003844:	4013      	ands	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	183b      	adds	r3, r7, r0
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4013      	ands	r3, r2
 800385a:	d11a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385c:	4b60      	ldr	r3, [pc, #384]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0049      	lsls	r1, r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fe fb9b 	bl	8001fa4 <HAL_GetTick>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	e008      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7fe fb96 	bl	8001fa4 <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0a6      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b56      	ldr	r3, [pc, #344]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d0f0      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003892:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	23c0      	movs	r3, #192	; 0xc0
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d034      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	23c0      	movs	r3, #192	; 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d02c      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b4:	4b49      	ldr	r3, [pc, #292]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0249      	lsls	r1, r1, #9
 80038c8:	430a      	orrs	r2, r1
 80038ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038cc:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ce:	6a1a      	ldr	r2, [r3, #32]
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038d2:	4945      	ldr	r1, [pc, #276]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fb5d 	bl	8001fa4 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fe fb58 	bl	8001fa4 <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	4a3c      	ldr	r2, [pc, #240]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e067      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	2202      	movs	r2, #2
 800390a:	4013      	ands	r3, r2
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390e:	4b33      	ldr	r3, [pc, #204]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4b2f      	ldr	r3, [pc, #188]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800391e:	430a      	orrs	r2, r1
 8003920:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003922:	2317      	movs	r3, #23
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003932:	492f      	ldr	r1, [pc, #188]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003934:	400a      	ands	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	2203      	movs	r2, #3
 8003948:	4393      	bics	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003952:	430a      	orrs	r2, r1
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	4013      	ands	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2220      	movs	r2, #32
 800397a:	4013      	ands	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	2210      	movs	r2, #16
 8003984:	4393      	bics	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800398e:	430a      	orrs	r2, r1
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	4013      	ands	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	4393      	bics	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ae:	430a      	orrs	r2, r1
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4013      	ands	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	4393      	bics	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b006      	add	sp, #24
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
 80039e4:	fffffcff 	.word	0xfffffcff
 80039e8:	fffeffff 	.word	0xfffeffff
 80039ec:	00001388 	.word	0x00001388
 80039f0:	efffffff 	.word	0xefffffff
 80039f4:	fffcffff 	.word	0xfffcffff

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e042      	b.n	8003a90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	223d      	movs	r2, #61	; 0x3d
 8003a0e:	5c9b      	ldrb	r3, [r3, r2]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	223c      	movs	r2, #60	; 0x3c
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fe f9ff 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223d      	movs	r2, #61	; 0x3d
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	0019      	movs	r1, r3
 8003a38:	0010      	movs	r0, r2
 8003a3a:	f000 f901 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2246      	movs	r2, #70	; 0x46
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223e      	movs	r2, #62	; 0x3e
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223f      	movs	r2, #63	; 0x3f
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2240      	movs	r2, #64	; 0x40
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2241      	movs	r2, #65	; 0x41
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2242      	movs	r2, #66	; 0x42
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2243      	movs	r2, #67	; 0x43
 8003a72:	2101      	movs	r1, #1
 8003a74:	5499      	strb	r1, [r3, r2]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2244      	movs	r2, #68	; 0x44
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2245      	movs	r2, #69	; 0x45
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	223d      	movs	r2, #61	; 0x3d
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	230f      	movs	r3, #15
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	223c      	movs	r2, #60	; 0x3c
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_ConfigClockSource+0x20>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0bc      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x19a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223c      	movs	r2, #60	; 0x3c
 8003abc:	2101      	movs	r1, #1
 8003abe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	223d      	movs	r2, #61	; 0x3d
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2277      	movs	r2, #119	; 0x77
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	0192      	lsls	r2, r2, #6
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d040      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xde>
 8003af4:	2280      	movs	r2, #128	; 0x80
 8003af6:	0192      	lsls	r2, r2, #6
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d900      	bls.n	8003afe <HAL_TIM_ConfigClockSource+0x66>
 8003afc:	e088      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	0152      	lsls	r2, r2, #5
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d100      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x70>
 8003b06:	e088      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x182>
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	0152      	lsls	r2, r2, #5
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d900      	bls.n	8003b12 <HAL_TIM_ConfigClockSource+0x7a>
 8003b10:	e07e      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b12:	2b70      	cmp	r3, #112	; 0x70
 8003b14:	d018      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0xb0>
 8003b16:	d900      	bls.n	8003b1a <HAL_TIM_ConfigClockSource+0x82>
 8003b18:	e07a      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b1a:	2b60      	cmp	r3, #96	; 0x60
 8003b1c:	d04f      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x126>
 8003b1e:	d900      	bls.n	8003b22 <HAL_TIM_ConfigClockSource+0x8a>
 8003b20:	e076      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b22:	2b50      	cmp	r3, #80	; 0x50
 8003b24:	d03b      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x106>
 8003b26:	d900      	bls.n	8003b2a <HAL_TIM_ConfigClockSource+0x92>
 8003b28:	e072      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d057      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x146>
 8003b2e:	d900      	bls.n	8003b32 <HAL_TIM_ConfigClockSource+0x9a>
 8003b30:	e06e      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d063      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x166>
 8003b36:	d86b      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d060      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x166>
 8003b3c:	d868      	bhi.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d05d      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x166>
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d05b      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x166>
 8003b46:	e063      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f000 f96c 	bl	8003e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2277      	movs	r2, #119	; 0x77
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
      break;
 8003b74:	e052      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f000 f955 	bl	8003e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	01c9      	lsls	r1, r1, #7
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
      break;
 8003b9c:	e03e      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	001a      	movs	r2, r3
 8003bac:	f000 f8c8 	bl	8003d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2150      	movs	r1, #80	; 0x50
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f922 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e02e      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	001a      	movs	r2, r3
 8003bcc:	f000 f8e6 	bl	8003d9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2160      	movs	r1, #96	; 0x60
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f912 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003bdc:	e01e      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	001a      	movs	r2, r3
 8003bec:	f000 f8a8 	bl	8003d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 f902 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e00e      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	0019      	movs	r1, r3
 8003c08:	0010      	movs	r0, r2
 8003c0a:	f000 f8f9 	bl	8003e00 <TIM_ITRx_SetConfig>
      break;
 8003c0e:	e005      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c10:	230f      	movs	r3, #15
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	223d      	movs	r2, #61	; 0x3d
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	223c      	movs	r2, #60	; 0x3c
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	ffff00ff 	.word	0xffff00ff

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <TIM_Base_SetConfig+0xe4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d008      	beq.n	8003c6a <TIM_Base_SetConfig+0x2a>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0x2a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a30      	ldr	r2, [pc, #192]	; (8003d28 <TIM_Base_SetConfig+0xe8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2270      	movs	r2, #112	; 0x70
 8003c6e:	4393      	bics	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <TIM_Base_SetConfig+0xe4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	05db      	lsls	r3, r3, #23
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d013      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <TIM_Base_SetConfig+0xe8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00f      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <TIM_Base_SetConfig+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <TIM_Base_SetConfig+0xf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <TIM_Base_SetConfig+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_Base_SetConfig+0x76>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <TIM_Base_SetConfig+0xf8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <TIM_Base_SetConfig+0xfc>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	4393      	bics	r3, r2
 8003cce:	001a      	movs	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <TIM_Base_SetConfig+0xe4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <TIM_Base_SetConfig+0xce>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <TIM_Base_SetConfig+0xf0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <TIM_Base_SetConfig+0xce>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <TIM_Base_SetConfig+0xf4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_Base_SetConfig+0xce>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <TIM_Base_SetConfig+0xf8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d103      	bne.n	8003d16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	615a      	str	r2, [r3, #20]
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b004      	add	sp, #16
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40002000 	.word	0x40002000
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	fffffcff 	.word	0xfffffcff

08003d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	2201      	movs	r2, #1
 8003d58:	4393      	bics	r3, r2
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	22f0      	movs	r2, #240	; 0xf0
 8003d6a:	4393      	bics	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	4393      	bics	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b006      	add	sp, #24
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	2210      	movs	r2, #16
 8003dae:	4393      	bics	r3, r2
 8003db0:	001a      	movs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <TIM_TI2_ConfigInputStage+0x60>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	22a0      	movs	r2, #160	; 0xa0
 8003dd8:	4393      	bics	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b006      	add	sp, #24
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	ffff0fff 	.word	0xffff0fff

08003e00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2270      	movs	r2, #112	; 0x70
 8003e14:	4393      	bics	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	2207      	movs	r2, #7
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	609a      	str	r2, [r3, #8]
}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <TIM_ETR_SetConfig+0x3c>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b006      	add	sp, #24
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	ffff00ff 	.word	0xffff00ff

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223c      	movs	r2, #60	; 0x3c
 8003e82:	5c9b      	ldrb	r3, [r3, r2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e047      	b.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223c      	movs	r2, #60	; 0x3c
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223d      	movs	r2, #61	; 0x3d
 8003e98:	2102      	movs	r1, #2
 8003e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2270      	movs	r2, #112	; 0x70
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10c      	bne.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2280      	movs	r2, #128	; 0x80
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	223d      	movs	r2, #61	; 0x3d
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	223c      	movs	r2, #60	; 0x3c
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40014000 	.word	0x40014000

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	2600      	movs	r6, #0
 8003f34:	4d0c      	ldr	r5, [pc, #48]	; (8003f68 <__libc_init_array+0x38>)
 8003f36:	4c0d      	ldr	r4, [pc, #52]	; (8003f6c <__libc_init_array+0x3c>)
 8003f38:	1b64      	subs	r4, r4, r5
 8003f3a:	10a4      	asrs	r4, r4, #2
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	2600      	movs	r6, #0
 8003f42:	f000 f87d 	bl	8004040 <_init>
 8003f46:	4d0a      	ldr	r5, [pc, #40]	; (8003f70 <__libc_init_array+0x40>)
 8003f48:	4c0a      	ldr	r4, [pc, #40]	; (8003f74 <__libc_init_array+0x44>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	00b3      	lsls	r3, r6, #2
 8003f56:	58eb      	ldr	r3, [r5, r3]
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	00b3      	lsls	r3, r6, #2
 8003f60:	58eb      	ldr	r3, [r5, r3]
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08004e9c 	.word	0x08004e9c
 8003f6c:	08004e9c 	.word	0x08004e9c
 8003f70:	08004e9c 	.word	0x08004e9c
 8003f74:	08004ea0 	.word	0x08004ea0

08003f78 <__itoa>:
 8003f78:	1e93      	subs	r3, r2, #2
 8003f7a:	b510      	push	{r4, lr}
 8003f7c:	000c      	movs	r4, r1
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	d904      	bls.n	8003f8c <__itoa+0x14>
 8003f82:	2300      	movs	r3, #0
 8003f84:	001c      	movs	r4, r3
 8003f86:	700b      	strb	r3, [r1, #0]
 8003f88:	0020      	movs	r0, r4
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	2a0a      	cmp	r2, #10
 8003f8e:	d109      	bne.n	8003fa4 <__itoa+0x2c>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	da07      	bge.n	8003fa4 <__itoa+0x2c>
 8003f94:	232d      	movs	r3, #45	; 0x2d
 8003f96:	700b      	strb	r3, [r1, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4240      	negs	r0, r0
 8003f9c:	1861      	adds	r1, r4, r1
 8003f9e:	f000 f80f 	bl	8003fc0 <__utoa>
 8003fa2:	e7f1      	b.n	8003f88 <__itoa+0x10>
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	e7f9      	b.n	8003f9c <__itoa+0x24>

08003fa8 <itoa>:
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	f7ff ffe5 	bl	8003f78 <__itoa>
 8003fae:	bd10      	pop	{r4, pc}

08003fb0 <memset>:
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	1882      	adds	r2, r0, r2
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	7019      	strb	r1, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <__utoa>:
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	000c      	movs	r4, r1
 8003fc4:	0016      	movs	r6, r2
 8003fc6:	b08d      	sub	sp, #52	; 0x34
 8003fc8:	2225      	movs	r2, #37	; 0x25
 8003fca:	0007      	movs	r7, r0
 8003fcc:	4916      	ldr	r1, [pc, #88]	; (8004028 <__utoa+0x68>)
 8003fce:	a802      	add	r0, sp, #8
 8003fd0:	f000 f82c 	bl	800402c <memcpy>
 8003fd4:	1e62      	subs	r2, r4, #1
 8003fd6:	9200      	str	r2, [sp, #0]
 8003fd8:	1eb3      	subs	r3, r6, #2
 8003fda:	aa02      	add	r2, sp, #8
 8003fdc:	2500      	movs	r5, #0
 8003fde:	9201      	str	r2, [sp, #4]
 8003fe0:	2b22      	cmp	r3, #34	; 0x22
 8003fe2:	d904      	bls.n	8003fee <__utoa+0x2e>
 8003fe4:	7025      	strb	r5, [r4, #0]
 8003fe6:	002c      	movs	r4, r5
 8003fe8:	0020      	movs	r0, r4
 8003fea:	b00d      	add	sp, #52	; 0x34
 8003fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fee:	0038      	movs	r0, r7
 8003ff0:	0031      	movs	r1, r6
 8003ff2:	f7fc f90f 	bl	8000214 <__aeabi_uidivmod>
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	9a01      	ldr	r2, [sp, #4]
 8003ffa:	0029      	movs	r1, r5
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	9a00      	ldr	r2, [sp, #0]
 8004000:	3501      	adds	r5, #1
 8004002:	5553      	strb	r3, [r2, r5]
 8004004:	003b      	movs	r3, r7
 8004006:	0007      	movs	r7, r0
 8004008:	429e      	cmp	r6, r3
 800400a:	d9f0      	bls.n	8003fee <__utoa+0x2e>
 800400c:	2300      	movs	r3, #0
 800400e:	0022      	movs	r2, r4
 8004010:	5563      	strb	r3, [r4, r5]
 8004012:	000b      	movs	r3, r1
 8004014:	1ac8      	subs	r0, r1, r3
 8004016:	4283      	cmp	r3, r0
 8004018:	dde6      	ble.n	8003fe8 <__utoa+0x28>
 800401a:	7810      	ldrb	r0, [r2, #0]
 800401c:	5ce5      	ldrb	r5, [r4, r3]
 800401e:	7015      	strb	r5, [r2, #0]
 8004020:	54e0      	strb	r0, [r4, r3]
 8004022:	3201      	adds	r2, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	e7f5      	b.n	8004014 <__utoa+0x54>
 8004028:	08004e74 	.word	0x08004e74

0800402c <memcpy>:
 800402c:	2300      	movs	r3, #0
 800402e:	b510      	push	{r4, lr}
 8004030:	429a      	cmp	r2, r3
 8004032:	d100      	bne.n	8004036 <memcpy+0xa>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	5ccc      	ldrb	r4, [r1, r3]
 8004038:	54c4      	strb	r4, [r0, r3]
 800403a:	3301      	adds	r3, #1
 800403c:	e7f8      	b.n	8004030 <memcpy+0x4>
	...

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr
